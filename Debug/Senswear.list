
Senswear.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008274  08008274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082fc  080082fc  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080082fc  080082fc  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082fc  080082fc  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082fc  080082fc  000182fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008300  08008300  00018300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000190  08008494  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d74  08008494  00021d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b1a  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c39  00000000  00000000  00040cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00044918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  00045d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053ff  00000000  00000000  00046fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e0c  00000000  00000000  0004c3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe6dd  00000000  00000000  000641bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005314  00000000  00000000  001628ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800825c 	.word	0x0800825c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	0800825c 	.word	0x0800825c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb95 	bl	80008fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f822 	bl	8000218 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001d4:	f000 f882 	bl	80002dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f962 	bl	80004a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001dc:	f000 f8ac 	bl	8000338 <MX_ADC1_Init>
  MX_SPI2_Init();
 80001e0:	f000 f920 	bl	8000424 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80001e4:	f007 fa04 	bl	80075f0 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <main+0x4c>)
 80001f0:	f001 fe80 	bl	8001ef4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80001f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f8:	f000 fbf4 	bl	80009e4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000202:	4804      	ldr	r0, [pc, #16]	; (8000214 <main+0x4c>)
 8000204:	f001 fe76 	bl	8001ef4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020c:	f000 fbea 	bl	80009e4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000210:	e7ea      	b.n	80001e8 <main+0x20>
 8000212:	bf00      	nop
 8000214:	48001800 	.word	0x48001800

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b096      	sub	sp, #88	; 0x58
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2244      	movs	r2, #68	; 0x44
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f008 f810 	bl	800824c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800023a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800023e:	f002 ff23 	bl	8003088 <HAL_PWREx_ControlVoltageScaling>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000248:	f000 fa3a 	bl	80006c0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800024c:	f002 fefe 	bl	800304c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000250:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <SystemClock_Config+0xc0>)
 8000252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000256:	4a20      	ldr	r2, [pc, #128]	; (80002d8 <SystemClock_Config+0xc0>)
 8000258:	f023 0318 	bic.w	r3, r3, #24
 800025c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000260:	2314      	movs	r3, #20
 8000262:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000270:	2360      	movs	r3, #96	; 0x60
 8000272:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	2302      	movs	r3, #2
 8000276:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000278:	2301      	movs	r3, #1
 800027a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800027c:	2301      	movs	r3, #1
 800027e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000280:	2328      	movs	r3, #40	; 0x28
 8000282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000284:	2307      	movs	r3, #7
 8000286:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000288:	2302      	movs	r3, #2
 800028a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800028c:	2302      	movs	r3, #2
 800028e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	4618      	mov	r0, r3
 8000296:	f002 ff6d 	bl	8003174 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002a0:	f000 fa0e 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2303      	movs	r3, #3
 80002aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002b8:	463b      	mov	r3, r7
 80002ba:	2104      	movs	r1, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f003 fb3f 	bl	8003940 <HAL_RCC_ClockConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002c8:	f000 f9fa 	bl	80006c0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002cc:	f003 fffc 	bl	80042c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80002d0:	bf00      	nop
 80002d2:	3758      	adds	r7, #88	; 0x58
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40021000 	.word	0x40021000

080002dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b0a2      	sub	sp, #136	; 0x88
 80002e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e2:	463b      	mov	r3, r7
 80002e4:	2288      	movs	r2, #136	; 0x88
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f007 ffaf 	bl	800824c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80002ee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80002f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002f8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80002fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000300:	2301      	movs	r3, #1
 8000302:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000304:	2301      	movs	r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000308:	2318      	movs	r3, #24
 800030a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800030c:	2307      	movs	r3, #7
 800030e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000310:	2302      	movs	r3, #2
 8000312:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000318:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800031c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031e:	463b      	mov	r3, r7
 8000320:	4618      	mov	r0, r3
 8000322:	f003 fce7 	bl	8003cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 800032c:	f000 f9c8 	bl	80006c0 <Error_Handler>
  }
}
 8000330:	bf00      	nop
 8000332:	3788      	adds	r7, #136	; 0x88
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b08a      	sub	sp, #40	; 0x28
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800033e:	f107 031c 	add.w	r3, r7, #28
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]
 8000356:	611a      	str	r2, [r3, #16]
 8000358:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800035a:	4b2f      	ldr	r3, [pc, #188]	; (8000418 <MX_ADC1_Init+0xe0>)
 800035c:	4a2f      	ldr	r2, [pc, #188]	; (800041c <MX_ADC1_Init+0xe4>)
 800035e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000360:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <MX_ADC1_Init+0xe0>)
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000366:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <MX_ADC1_Init+0xe0>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036c:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <MX_ADC1_Init+0xe0>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000372:	4b29      	ldr	r3, [pc, #164]	; (8000418 <MX_ADC1_Init+0xe0>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000378:	4b27      	ldr	r3, [pc, #156]	; (8000418 <MX_ADC1_Init+0xe0>)
 800037a:	2204      	movs	r2, #4
 800037c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <MX_ADC1_Init+0xe0>)
 8000380:	2200      	movs	r2, #0
 8000382:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000384:	4b24      	ldr	r3, [pc, #144]	; (8000418 <MX_ADC1_Init+0xe0>)
 8000386:	2201      	movs	r2, #1
 8000388:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800038a:	4b23      	ldr	r3, [pc, #140]	; (8000418 <MX_ADC1_Init+0xe0>)
 800038c:	2201      	movs	r2, #1
 800038e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000390:	4b21      	ldr	r3, [pc, #132]	; (8000418 <MX_ADC1_Init+0xe0>)
 8000392:	2200      	movs	r2, #0
 8000394:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000398:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <MX_ADC1_Init+0xe0>)
 800039a:	2200      	movs	r2, #0
 800039c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039e:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <MX_ADC1_Init+0xe0>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a4:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <MX_ADC1_Init+0xe0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ac:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <MX_ADC1_Init+0xe0>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003b2:	4b19      	ldr	r3, [pc, #100]	; (8000418 <MX_ADC1_Init+0xe0>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ba:	4817      	ldr	r0, [pc, #92]	; (8000418 <MX_ADC1_Init+0xe0>)
 80003bc:	f000 fcc2 	bl	8000d44 <HAL_ADC_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80003c6:	f000 f97b 	bl	80006c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003ce:	f107 031c 	add.w	r3, r7, #28
 80003d2:	4619      	mov	r1, r3
 80003d4:	4810      	ldr	r0, [pc, #64]	; (8000418 <MX_ADC1_Init+0xe0>)
 80003d6:	f001 fa21 	bl	800181c <HAL_ADCEx_MultiModeConfigChannel>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003e0:	f000 f96e 	bl	80006c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_ADC1_Init+0xe8>)
 80003e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e8:	2306      	movs	r3, #6
 80003ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003f0:	237f      	movs	r3, #127	; 0x7f
 80003f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f4:	2304      	movs	r3, #4
 80003f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4619      	mov	r1, r3
 8000400:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_ADC1_Init+0xe0>)
 8000402:	f000 fdf5 	bl	8000ff0 <HAL_ADC_ConfigChannel>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800040c:	f000 f958 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000410:	bf00      	nop
 8000412:	3728      	adds	r7, #40	; 0x28
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000434 	.word	0x20000434
 800041c:	50040000 	.word	0x50040000
 8000420:	0c900008 	.word	0x0c900008

08000424 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_SPI2_Init+0x74>)
 800042a:	4a1c      	ldr	r2, [pc, #112]	; (800049c <MX_SPI2_Init+0x78>)
 800042c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <MX_SPI2_Init+0x74>)
 8000430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000434:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000436:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_SPI2_Init+0x74>)
 8000438:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800043c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800043e:	4b16      	ldr	r3, [pc, #88]	; (8000498 <MX_SPI2_Init+0x74>)
 8000440:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000444:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_SPI2_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_SPI2_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_SPI2_Init+0x74>)
 8000454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000458:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_SPI2_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000460:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <MX_SPI2_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_SPI2_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <MX_SPI2_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_SPI2_Init+0x74>)
 8000474:	2207      	movs	r2, #7
 8000476:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <MX_SPI2_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_SPI2_Init+0x74>)
 8000480:	2208      	movs	r2, #8
 8000482:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <MX_SPI2_Init+0x74>)
 8000486:	f004 f901 	bl	800468c <HAL_SPI_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000490:	f000 f916 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200003d0 	.word	0x200003d0
 800049c:	40003800 	.word	0x40003800

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	; 0x30
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 031c 	add.w	r3, r7, #28
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b7c      	ldr	r3, [pc, #496]	; (80006a8 <MX_GPIO_Init+0x208>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	4a7b      	ldr	r2, [pc, #492]	; (80006a8 <MX_GPIO_Init+0x208>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c2:	4b79      	ldr	r3, [pc, #484]	; (80006a8 <MX_GPIO_Init+0x208>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	61bb      	str	r3, [r7, #24]
 80004cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ce:	4b76      	ldr	r3, [pc, #472]	; (80006a8 <MX_GPIO_Init+0x208>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	4a75      	ldr	r2, [pc, #468]	; (80006a8 <MX_GPIO_Init+0x208>)
 80004d4:	f043 0308 	orr.w	r3, r3, #8
 80004d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004da:	4b73      	ldr	r3, [pc, #460]	; (80006a8 <MX_GPIO_Init+0x208>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	f003 0308 	and.w	r3, r3, #8
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004e6:	4b70      	ldr	r3, [pc, #448]	; (80006a8 <MX_GPIO_Init+0x208>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	4a6f      	ldr	r2, [pc, #444]	; (80006a8 <MX_GPIO_Init+0x208>)
 80004ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f2:	4b6d      	ldr	r3, [pc, #436]	; (80006a8 <MX_GPIO_Init+0x208>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 80004fe:	f002 fe29 	bl	8003154 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b69      	ldr	r3, [pc, #420]	; (80006a8 <MX_GPIO_Init+0x208>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a68      	ldr	r2, [pc, #416]	; (80006a8 <MX_GPIO_Init+0x208>)
 8000508:	f043 0302 	orr.w	r3, r3, #2
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b66      	ldr	r3, [pc, #408]	; (80006a8 <MX_GPIO_Init+0x208>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b63      	ldr	r3, [pc, #396]	; (80006a8 <MX_GPIO_Init+0x208>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4a62      	ldr	r2, [pc, #392]	; (80006a8 <MX_GPIO_Init+0x208>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4b60      	ldr	r3, [pc, #384]	; (80006a8 <MX_GPIO_Init+0x208>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	4b5d      	ldr	r3, [pc, #372]	; (80006a8 <MX_GPIO_Init+0x208>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a5c      	ldr	r2, [pc, #368]	; (80006a8 <MX_GPIO_Init+0x208>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b5a      	ldr	r3, [pc, #360]	; (80006a8 <MX_GPIO_Init+0x208>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000550:	4856      	ldr	r0, [pc, #344]	; (80006ac <MX_GPIO_Init+0x20c>)
 8000552:	f001 fccf 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_RST_GPIO_Port, BLUE_RST_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	4855      	ldr	r0, [pc, #340]	; (80006b0 <MX_GPIO_Init+0x210>)
 800055c:	f001 fcca 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_AG_Pin|BLUE_CS_Pin|CS_M_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f241 0106 	movw	r1, #4102	; 0x1006
 8000566:	4853      	ldr	r0, [pc, #332]	; (80006b4 <MX_GPIO_Init+0x214>)
 8000568:	f001 fcc4 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_A_GPIO_Port, CS_A_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2110      	movs	r1, #16
 8000570:	4851      	ldr	r0, [pc, #324]	; (80006b8 <MX_GPIO_Init+0x218>)
 8000572:	f001 fcbf 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15 PA10 PA8 PA9
                           PA1 PA4 PA2 PA3
                           PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
 8000576:	f248 731f 	movw	r3, #34591	; 0x871f
 800057a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057c:	2303      	movs	r3, #3
 800057e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 031c 	add.w	r3, r7, #28
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f001 fb07 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000592:	2304      	movs	r3, #4
 8000594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000596:	2303      	movs	r3, #3
 8000598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	4619      	mov	r1, r3
 80005a4:	4845      	ldr	r0, [pc, #276]	; (80006bc <MX_GPIO_Init+0x21c>)
 80005a6:	f001 fafb 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 PG10 PG13
                           PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_13
 80005aa:	f44f 43dc 	mov.w	r3, #28160	; 0x6e00
 80005ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b0:	2303      	movs	r3, #3
 80005b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	4619      	mov	r1, r3
 80005be:	483b      	ldr	r0, [pc, #236]	; (80006ac <MX_GPIO_Init+0x20c>)
 80005c0:	f001 faee 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB7 PB6 PB4
                           PB5 PB8 PB9 PB14
                           PB11 PB10 PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4
 80005c4:	f644 73f9 	movw	r3, #20473	; 0x4ff9
 80005c8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	4619      	mov	r1, r3
 80005d8:	4836      	ldr	r0, [pc, #216]	; (80006b4 <MX_GPIO_Init+0x214>)
 80005da:	f001 fae1 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC13 PC11 PC10
                           PC9 PC7 PC8 PC6
                           PC1 PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10
 80005de:	f643 73cb 	movw	r3, #16331	; 0x3fcb
 80005e2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e4:	2303      	movs	r3, #3
 80005e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	4619      	mov	r1, r3
 80005f2:	4831      	ldr	r0, [pc, #196]	; (80006b8 <MX_GPIO_Init+0x218>)
 80005f4:	f001 fad4 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	4826      	ldr	r0, [pc, #152]	; (80006ac <MX_GPIO_Init+0x20c>)
 8000612:	f001 fac5 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000616:	2302      	movs	r3, #2
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061a:	2303      	movs	r3, #3
 800061c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4821      	ldr	r0, [pc, #132]	; (80006b0 <MX_GPIO_Init+0x210>)
 800062a:	f001 fab9 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_RST_Pin */
  GPIO_InitStruct.Pin = BLUE_RST_Pin;
 800062e:	2301      	movs	r3, #1
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BLUE_RST_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4619      	mov	r1, r3
 8000644:	481a      	ldr	r0, [pc, #104]	; (80006b0 <MX_GPIO_Init+0x210>)
 8000646:	f001 faab 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_AG_Pin BLUE_CS_Pin CS_M_Pin */
  GPIO_InitStruct.Pin = CS_AG_Pin|BLUE_CS_Pin|CS_M_Pin;
 800064a:	f241 0306 	movw	r3, #4102	; 0x1006
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <MX_GPIO_Init+0x214>)
 8000664:	f001 fa9c 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_IRQ_Pin */
  GPIO_InitStruct.Pin = BLUE_IRQ_Pin;
 8000668:	2320      	movs	r3, #32
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BLUE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	480e      	ldr	r0, [pc, #56]	; (80006b8 <MX_GPIO_Init+0x218>)
 800067e:	f001 fa8f 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_A_Pin */
  GPIO_InitStruct.Pin = CS_A_Pin;
 8000682:	2310      	movs	r3, #16
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_A_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <MX_GPIO_Init+0x218>)
 800069a:	f001 fa81 	bl	8001ba0 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3730      	adds	r7, #48	; 0x30
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48001800 	.word	0x48001800
 80006b0:	48001c00 	.word	0x48001c00
 80006b4:	48000400 	.word	0x48000400
 80006b8:	48000800 	.word	0x48000800
 80006bc:	48000c00 	.word	0x48000c00

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x44>)
 80006d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_MspInit+0x44>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6613      	str	r3, [r2, #96]	; 0x60
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x44>)
 80006e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_MspInit+0x44>)
 80006ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_MspInit+0x44>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	6593      	str	r3, [r2, #88]	; 0x58
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_MspInit+0x44>)
 80006f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a15      	ldr	r2, [pc, #84]	; (8000788 <HAL_ADC_MspInit+0x74>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d123      	bne.n	800077e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_ADC_MspInit+0x78>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <HAL_ADC_MspInit+0x78>)
 800073c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_ADC_MspInit+0x78>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_ADC_MspInit+0x78>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <HAL_ADC_MspInit+0x78>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_ADC_MspInit+0x78>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000766:	2304      	movs	r3, #4
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800076a:	230b      	movs	r3, #11
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <HAL_ADC_MspInit+0x7c>)
 800077a:	f001 fa11 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	50040000 	.word	0x50040000
 800078c:	40021000 	.word	0x40021000
 8000790:	48000800 	.word	0x48000800

08000794 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <HAL_SPI_MspInit+0x7c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d128      	bne.n	8000808 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_SPI_MspInit+0x80>)
 80007b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <HAL_SPI_MspInit+0x80>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c0:	6593      	str	r3, [r2, #88]	; 0x58
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_SPI_MspInit+0x80>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_SPI_MspInit+0x80>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <HAL_SPI_MspInit+0x80>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_SPI_MspInit+0x80>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80007e6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007f8:	2305      	movs	r3, #5
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <HAL_SPI_MspInit+0x84>)
 8000804:	f001 f9cc 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40003800 	.word	0x40003800
 8000814:	40021000 	.word	0x40021000
 8000818:	48000400 	.word	0x48000400

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f89c 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <OTG_FS_IRQHandler+0x10>)
 8000876:	f001 fca8 	bl	80021ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000196c 	.word	0x2000196c

08000884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <SystemInit+0x20>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <SystemInit+0x20>)
 8000890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ac:	f7ff ffea 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	; (80008e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	; (80008f4 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d6:	f007 fc95 	bl	8008204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008da:	f7ff fc75 	bl	80001c8 <main>

080008de <LoopForever>:

LoopForever:
    b LoopForever
 80008de:	e7fe      	b.n	80008de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80008ec:	08008304 	.word	0x08008304
  ldr r2, =_sbss
 80008f0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80008f4:	20001d74 	.word	0x20001d74

080008f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_2_IRQHandler>

080008fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000900:	2300      	movs	r3, #0
 8000902:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f001 f909 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800090a:	200f      	movs	r0, #15
 800090c:	f000 f80e 	bl	800092c <HAL_InitTick>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	71fb      	strb	r3, [r7, #7]
 800091a:	e001      	b.n	8000920 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800091c:	f7ff fed6 	bl	80006cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000920:	79fb      	ldrb	r3, [r7, #7]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_InitTick+0x6c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d023      	beq.n	8000988 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_InitTick+0x70>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_InitTick+0x6c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f001 f915 	bl	8001b86 <HAL_SYSTICK_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10f      	bne.n	8000982 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d809      	bhi.n	800097c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f001 f8df 	bl	8001b32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_InitTick+0x74>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	e007      	b.n	800098c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	e004      	b.n	800098c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e001      	b.n	800098c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800098c:	7bfb      	ldrb	r3, [r7, #15]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000004 	.word	0x20000004

080009a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x20>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x24>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_IncTick+0x24>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000498 	.word	0x20000498

080009cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_GetTick+0x14>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000498 	.word	0x20000498

080009e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ec:	f7ff ffee 	bl	80009cc <HAL_GetTick>
 80009f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d005      	beq.n	8000a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_Delay+0x44>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0a:	bf00      	nop
 8000a0c:	f7ff ffde 	bl	80009cc <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8f7      	bhi.n	8000a0c <HAL_Delay+0x28>
  {
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008

08000a2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	431a      	orrs	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	609a      	str	r2, [r3, #8]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	431a      	orrs	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3360      	adds	r3, #96	; 0x60
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <LL_ADC_SetOffset+0x44>)
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000acc:	bf00      	nop
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	03fff000 	.word	0x03fff000

08000adc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3360      	adds	r3, #96	; 0x60
 8000aea:	461a      	mov	r2, r3
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3360      	adds	r3, #96	; 0x60
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000b32:	bf00      	nop
 8000b34:	371c      	adds	r7, #28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b087      	sub	sp, #28
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3330      	adds	r3, #48	; 0x30
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	f003 030c 	and.w	r3, r3, #12
 8000b5a:	4413      	add	r3, r2
 8000b5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	f003 031f 	and.w	r3, r3, #31
 8000b68:	211f      	movs	r1, #31
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	401a      	ands	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	0e9b      	lsrs	r3, r3, #26
 8000b76:	f003 011f 	and.w	r1, r3, #31
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	f003 031f 	and.w	r3, r3, #31
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	431a      	orrs	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b8a:	bf00      	nop
 8000b8c:	371c      	adds	r7, #28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b087      	sub	sp, #28
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3314      	adds	r3, #20
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	0e5b      	lsrs	r3, r3, #25
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	4413      	add	r3, r2
 8000bb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	0d1b      	lsrs	r3, r3, #20
 8000bbe:	f003 031f 	and.w	r3, r3, #31
 8000bc2:	2107      	movs	r1, #7
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	401a      	ands	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	0d1b      	lsrs	r3, r3, #20
 8000bd0:	f003 031f 	and.w	r3, r3, #31
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000be0:	bf00      	nop
 8000be2:	371c      	adds	r7, #28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c04:	43db      	mvns	r3, r3
 8000c06:	401a      	ands	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0318 	and.w	r3, r3, #24
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c10:	40d9      	lsrs	r1, r3
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	400b      	ands	r3, r1
 8000c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	0007ffff 	.word	0x0007ffff

08000c34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6093      	str	r3, [r2, #8]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c6c:	d101      	bne.n	8000c72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e000      	b.n	8000c74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cbc:	d101      	bne.n	8000cc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d101      	bne.n	8000ce8 <LL_ADC_IsEnabled+0x18>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e000      	b.n	8000cea <LL_ADC_IsEnabled+0x1a>
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d101      	bne.n	8000d0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e000      	b.n	8000d10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d101      	bne.n	8000d34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e136      	b.n	8000fcc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fcd1 	bl	8000714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff67 	bl	8000c58 <LL_ADC_IsDeepPowerDownEnabled>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d004      	beq.n	8000d9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff4d 	bl	8000c34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff82 	bl	8000ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d115      	bne.n	8000dd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff66 	bl	8000c80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000db4:	4b87      	ldr	r3, [pc, #540]	; (8000fd4 <HAL_ADC_Init+0x290>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	099b      	lsrs	r3, r3, #6
 8000dba:	4a87      	ldr	r2, [pc, #540]	; (8000fd8 <HAL_ADC_Init+0x294>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	099b      	lsrs	r3, r3, #6
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000dc8:	e002      	b.n	8000dd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f9      	bne.n	8000dca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff64 	bl	8000ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10d      	bne.n	8000e02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dea:	f043 0210 	orr.w	r2, r3, #16
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	f043 0201 	orr.w	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff75 	bl	8000cf6 <LL_ADC_REG_IsConversionOngoing>
 8000e0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f040 80cf 	bne.w	8000fba <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 80cb 	bne.w	8000fba <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e2c:	f043 0202 	orr.w	r2, r3, #2
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff49 	bl	8000cd0 <LL_ADC_IsEnabled>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d115      	bne.n	8000e70 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e44:	4865      	ldr	r0, [pc, #404]	; (8000fdc <HAL_ADC_Init+0x298>)
 8000e46:	f7ff ff43 	bl	8000cd0 <LL_ADC_IsEnabled>
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	4864      	ldr	r0, [pc, #400]	; (8000fe0 <HAL_ADC_Init+0x29c>)
 8000e4e:	f7ff ff3f 	bl	8000cd0 <LL_ADC_IsEnabled>
 8000e52:	4603      	mov	r3, r0
 8000e54:	431c      	orrs	r4, r3
 8000e56:	4863      	ldr	r0, [pc, #396]	; (8000fe4 <HAL_ADC_Init+0x2a0>)
 8000e58:	f7ff ff3a 	bl	8000cd0 <LL_ADC_IsEnabled>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4323      	orrs	r3, r4
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d105      	bne.n	8000e70 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	485f      	ldr	r0, [pc, #380]	; (8000fe8 <HAL_ADC_Init+0x2a4>)
 8000e6c:	f7ff fdde 	bl	8000a2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7e5b      	ldrb	r3, [r3, #25]
 8000e74:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e7a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000e80:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000e86:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e8e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d106      	bne.n	8000eac <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	045b      	lsls	r3, r3, #17
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d009      	beq.n	8000ec8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	4b47      	ldr	r3, [pc, #284]	; (8000fec <HAL_ADC_Init+0x2a8>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	69b9      	ldr	r1, [r7, #24]
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff08 	bl	8000cf6 <LL_ADC_REG_IsConversionOngoing>
 8000ee6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff15 	bl	8000d1c <LL_ADC_INJ_IsConversionOngoing>
 8000ef2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d13d      	bne.n	8000f76 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d13a      	bne.n	8000f76 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f04:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f0c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f1c:	f023 0302 	bic.w	r3, r3, #2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	69b9      	ldr	r1, [r7, #24]
 8000f26:	430b      	orrs	r3, r1
 8000f28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d118      	bne.n	8000f66 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f3e:	f023 0304 	bic.w	r3, r3, #4
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f4a:	4311      	orrs	r1, r2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f50:	4311      	orrs	r1, r2
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000f56:	430a      	orrs	r2, r1
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	e007      	b.n	8000f76 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0201 	bic.w	r2, r2, #1
 8000f74:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d10c      	bne.n	8000f98 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	f023 010f 	bic.w	r1, r3, #15
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	1e5a      	subs	r2, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
 8000f96:	e007      	b.n	8000fa8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 020f 	bic.w	r2, r2, #15
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fac:	f023 0303 	bic.w	r3, r3, #3
 8000fb0:	f043 0201 	orr.w	r2, r3, #1
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	655a      	str	r2, [r3, #84]	; 0x54
 8000fb8:	e007      	b.n	8000fca <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fbe:	f043 0210 	orr.w	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fca:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3724      	adds	r7, #36	; 0x24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	053e2d63 	.word	0x053e2d63
 8000fdc:	50040000 	.word	0x50040000
 8000fe0:	50040100 	.word	0x50040100
 8000fe4:	50040200 	.word	0x50040200
 8000fe8:	50040300 	.word	0x50040300
 8000fec:	fff0c007 	.word	0xfff0c007

08000ff0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0b6      	sub	sp, #216	; 0xd8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <HAL_ADC_ConfigChannel+0x22>
 800100e:	2302      	movs	r3, #2
 8001010:	e3c7      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x7b2>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe69 	bl	8000cf6 <LL_ADC_REG_IsConversionOngoing>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 83a8 	bne.w	800177c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b05      	cmp	r3, #5
 8001032:	d824      	bhi.n	800107e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	3b02      	subs	r3, #2
 800103a:	2b03      	cmp	r3, #3
 800103c:	d81b      	bhi.n	8001076 <HAL_ADC_ConfigChannel+0x86>
 800103e:	a201      	add	r2, pc, #4	; (adr r2, 8001044 <HAL_ADC_ConfigChannel+0x54>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	08001055 	.word	0x08001055
 8001048:	0800105d 	.word	0x0800105d
 800104c:	08001065 	.word	0x08001065
 8001050:	0800106d 	.word	0x0800106d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	220c      	movs	r2, #12
 8001058:	605a      	str	r2, [r3, #4]
          break;
 800105a:	e011      	b.n	8001080 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2212      	movs	r2, #18
 8001060:	605a      	str	r2, [r3, #4]
          break;
 8001062:	e00d      	b.n	8001080 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2218      	movs	r2, #24
 8001068:	605a      	str	r2, [r3, #4]
          break;
 800106a:	e009      	b.n	8001080 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001072:	605a      	str	r2, [r3, #4]
          break;
 8001074:	e004      	b.n	8001080 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2206      	movs	r2, #6
 800107a:	605a      	str	r2, [r3, #4]
          break;
 800107c:	e000      	b.n	8001080 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800107e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	6859      	ldr	r1, [r3, #4]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	f7ff fd56 	bl	8000b3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fe2d 	bl	8000cf6 <LL_ADC_REG_IsConversionOngoing>
 800109c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe39 	bl	8000d1c <LL_ADC_INJ_IsConversionOngoing>
 80010aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 81a6 	bne.w	8001404 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f040 81a1 	bne.w	8001404 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	6819      	ldr	r1, [r3, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	461a      	mov	r2, r3
 80010d0:	f7ff fd61 	bl	8000b96 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d00a      	beq.n	800110c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	6919      	ldr	r1, [r3, #16]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001106:	f7ff fcc5 	bl	8000a94 <LL_ADC_SetOffset>
 800110a:	e17b      	b.n	8001404 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fce2 	bl	8000adc <LL_ADC_GetOffsetChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10a      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x148>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fcd7 	bl	8000adc <LL_ADC_GetOffsetChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	0e9b      	lsrs	r3, r3, #26
 8001132:	f003 021f 	and.w	r2, r3, #31
 8001136:	e01e      	b.n	8001176 <HAL_ADC_ConfigChannel+0x186>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fccc 	bl	8000adc <LL_ADC_GetOffsetChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800115a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800115e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001166:	2320      	movs	r3, #32
 8001168:	e004      	b.n	8001174 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800116a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800117e:	2b00      	cmp	r3, #0
 8001180:	d105      	bne.n	800118e <HAL_ADC_ConfigChannel+0x19e>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0e9b      	lsrs	r3, r3, #26
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	e018      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x1d0>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80011a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80011aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80011b2:	2320      	movs	r3, #32
 80011b4:	e004      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80011b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d106      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fc9b 	bl	8000b08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2101      	movs	r1, #1
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fc7f 	bl	8000adc <LL_ADC_GetOffsetChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10a      	bne.n	80011fe <HAL_ADC_ConfigChannel+0x20e>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2101      	movs	r1, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fc74 	bl	8000adc <LL_ADC_GetOffsetChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	0e9b      	lsrs	r3, r3, #26
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	e01e      	b.n	800123c <HAL_ADC_ConfigChannel+0x24c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2101      	movs	r1, #1
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fc69 	bl	8000adc <LL_ADC_GetOffsetChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800121c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800122c:	2320      	movs	r3, #32
 800122e:	e004      	b.n	800123a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001234:	fab3 f383 	clz	r3, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001244:	2b00      	cmp	r3, #0
 8001246:	d105      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x264>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0e9b      	lsrs	r3, r3, #26
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	e018      	b.n	8001286 <HAL_ADC_ConfigChannel+0x296>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001260:	fa93 f3a3 	rbit	r3, r3
 8001264:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001268:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800126c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001278:	2320      	movs	r3, #32
 800127a:	e004      	b.n	8001286 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800127c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001280:	fab3 f383 	clz	r3, r3
 8001284:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001286:	429a      	cmp	r2, r3
 8001288:	d106      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fc38 	bl	8000b08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fc1c 	bl	8000adc <LL_ADC_GetOffsetChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10a      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x2d4>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2102      	movs	r1, #2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fc11 	bl	8000adc <LL_ADC_GetOffsetChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	0e9b      	lsrs	r3, r3, #26
 80012be:	f003 021f 	and.w	r2, r3, #31
 80012c2:	e01e      	b.n	8001302 <HAL_ADC_ConfigChannel+0x312>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fc06 	bl	8000adc <LL_ADC_GetOffsetChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80012e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80012ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80012f2:	2320      	movs	r3, #32
 80012f4:	e004      	b.n	8001300 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80012f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012fa:	fab3 f383 	clz	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <HAL_ADC_ConfigChannel+0x32a>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0e9b      	lsrs	r3, r3, #26
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	e016      	b.n	8001348 <HAL_ADC_ConfigChannel+0x358>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800132c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800132e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800133a:	2320      	movs	r3, #32
 800133c:	e004      	b.n	8001348 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800133e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001348:	429a      	cmp	r2, r3
 800134a:	d106      	bne.n	800135a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2200      	movs	r2, #0
 8001352:	2102      	movs	r1, #2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fbd7 	bl	8000b08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2103      	movs	r1, #3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fbbb 	bl	8000adc <LL_ADC_GetOffsetChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10a      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x396>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2103      	movs	r1, #3
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fbb0 	bl	8000adc <LL_ADC_GetOffsetChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	0e9b      	lsrs	r3, r3, #26
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	e017      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x3c6>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2103      	movs	r1, #3
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fba5 	bl	8000adc <LL_ADC_GetOffsetChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800139e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80013a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80013a8:	2320      	movs	r3, #32
 80013aa:	e003      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80013ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d105      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x3de>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	0e9b      	lsrs	r3, r3, #26
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	e011      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x402>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80013dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80013e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80013e6:	2320      	movs	r3, #32
 80013e8:	e003      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80013ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ec:	fab3 f383 	clz	r3, r3
 80013f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d106      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2200      	movs	r2, #0
 80013fc:	2103      	movs	r1, #3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fb82 	bl	8000b08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fc61 	bl	8000cd0 <LL_ADC_IsEnabled>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	f040 813f 	bne.w	8001694 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	461a      	mov	r2, r3
 8001424:	f7ff fbe2 	bl	8000bec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a8e      	ldr	r2, [pc, #568]	; (8001668 <HAL_ADC_ConfigChannel+0x678>)
 800142e:	4293      	cmp	r3, r2
 8001430:	f040 8130 	bne.w	8001694 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <HAL_ADC_ConfigChannel+0x46c>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0e9b      	lsrs	r3, r3, #26
 800144a:	3301      	adds	r3, #1
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2b09      	cmp	r3, #9
 8001452:	bf94      	ite	ls
 8001454:	2301      	movls	r3, #1
 8001456:	2300      	movhi	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	e019      	b.n	8001490 <HAL_ADC_ConfigChannel+0x4a0>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800146a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800146c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800146e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001474:	2320      	movs	r3, #32
 8001476:	e003      	b.n	8001480 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	3301      	adds	r3, #1
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	2b09      	cmp	r3, #9
 8001488:	bf94      	ite	ls
 800148a:	2301      	movls	r3, #1
 800148c:	2300      	movhi	r3, #0
 800148e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001490:	2b00      	cmp	r3, #0
 8001492:	d079      	beq.n	8001588 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800149c:	2b00      	cmp	r3, #0
 800149e:	d107      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x4c0>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	0e9b      	lsrs	r3, r3, #26
 80014a6:	3301      	adds	r3, #1
 80014a8:	069b      	lsls	r3, r3, #26
 80014aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014ae:	e015      	b.n	80014dc <HAL_ADC_ConfigChannel+0x4ec>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80014be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80014c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80014c8:	2320      	movs	r3, #32
 80014ca:	e003      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80014cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ce:	fab3 f383 	clz	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	3301      	adds	r3, #1
 80014d6:	069b      	lsls	r3, r3, #26
 80014d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x50c>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0e9b      	lsrs	r3, r3, #26
 80014ee:	3301      	adds	r3, #1
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	e017      	b.n	800152c <HAL_ADC_ConfigChannel+0x53c>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800150e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001514:	2320      	movs	r3, #32
 8001516:	e003      	b.n	8001520 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3301      	adds	r3, #1
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	ea42 0103 	orr.w	r1, r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10a      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x562>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0e9b      	lsrs	r3, r3, #26
 8001542:	3301      	adds	r3, #1
 8001544:	f003 021f 	and.w	r2, r3, #31
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	051b      	lsls	r3, r3, #20
 8001550:	e018      	b.n	8001584 <HAL_ADC_ConfigChannel+0x594>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800156a:	2320      	movs	r3, #32
 800156c:	e003      	b.n	8001576 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800156e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3301      	adds	r3, #1
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001584:	430b      	orrs	r3, r1
 8001586:	e080      	b.n	800168a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001590:	2b00      	cmp	r3, #0
 8001592:	d107      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x5b4>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0e9b      	lsrs	r3, r3, #26
 800159a:	3301      	adds	r3, #1
 800159c:	069b      	lsls	r3, r3, #26
 800159e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015a2:	e015      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x5e0>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80015b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80015b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80015bc:	2320      	movs	r3, #32
 80015be:	e003      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80015c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c2:	fab3 f383 	clz	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	069b      	lsls	r3, r3, #26
 80015cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x600>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0e9b      	lsrs	r3, r3, #26
 80015e2:	3301      	adds	r3, #1
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	2101      	movs	r1, #1
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	e017      	b.n	8001620 <HAL_ADC_ConfigChannel+0x630>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	61fb      	str	r3, [r7, #28]
  return result;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001608:	2320      	movs	r3, #32
 800160a:	e003      	b.n	8001614 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	3301      	adds	r3, #1
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	2101      	movs	r1, #1
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	ea42 0103 	orr.w	r1, r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10d      	bne.n	800164c <HAL_ADC_ConfigChannel+0x65c>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0e9b      	lsrs	r3, r3, #26
 8001636:	3301      	adds	r3, #1
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	3b1e      	subs	r3, #30
 8001644:	051b      	lsls	r3, r3, #20
 8001646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800164a:	e01d      	b.n	8001688 <HAL_ADC_ConfigChannel+0x698>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	613b      	str	r3, [r7, #16]
  return result;
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d103      	bne.n	800166c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001664:	2320      	movs	r3, #32
 8001666:	e005      	b.n	8001674 <HAL_ADC_ConfigChannel+0x684>
 8001668:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fab3 f383 	clz	r3, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	f003 021f 	and.w	r2, r3, #31
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	3b1e      	subs	r3, #30
 8001682:	051b      	lsls	r3, r3, #20
 8001684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001688:	430b      	orrs	r3, r1
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	6892      	ldr	r2, [r2, #8]
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fa81 	bl	8000b96 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b44      	ldr	r3, [pc, #272]	; (80017ac <HAL_ADC_ConfigChannel+0x7bc>)
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d07a      	beq.n	8001796 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016a0:	4843      	ldr	r0, [pc, #268]	; (80017b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80016a2:	f7ff f9e9 	bl	8000a78 <LL_ADC_GetCommonPathInternalCh>
 80016a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a41      	ldr	r2, [pc, #260]	; (80017b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d12c      	bne.n	800170e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d126      	bne.n	800170e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a3c      	ldr	r2, [pc, #240]	; (80017b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d004      	beq.n	80016d4 <HAL_ADC_ConfigChannel+0x6e4>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a3b      	ldr	r2, [pc, #236]	; (80017bc <HAL_ADC_ConfigChannel+0x7cc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d15d      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016dc:	4619      	mov	r1, r3
 80016de:	4834      	ldr	r0, [pc, #208]	; (80017b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80016e0:	f7ff f9b7 	bl	8000a52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_ADC_ConfigChannel+0x7d0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	099b      	lsrs	r3, r3, #6
 80016ea:	4a36      	ldr	r2, [pc, #216]	; (80017c4 <HAL_ADC_ConfigChannel+0x7d4>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	099b      	lsrs	r3, r3, #6
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016fe:	e002      	b.n	8001706 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3b01      	subs	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f9      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800170c:	e040      	b.n	8001790 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a2d      	ldr	r2, [pc, #180]	; (80017c8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d118      	bne.n	800174a <HAL_ADC_ConfigChannel+0x75a>
 8001718:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800171c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d112      	bne.n	800174a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a23      	ldr	r2, [pc, #140]	; (80017b8 <HAL_ADC_ConfigChannel+0x7c8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d004      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x748>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a22      	ldr	r2, [pc, #136]	; (80017bc <HAL_ADC_ConfigChannel+0x7cc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d12d      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800173c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001740:	4619      	mov	r1, r3
 8001742:	481b      	ldr	r0, [pc, #108]	; (80017b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001744:	f7ff f985 	bl	8000a52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001748:	e024      	b.n	8001794 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <HAL_ADC_ConfigChannel+0x7dc>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d120      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11a      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d115      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800176a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800176e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001772:	4619      	mov	r1, r3
 8001774:	480e      	ldr	r0, [pc, #56]	; (80017b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001776:	f7ff f96c 	bl	8000a52 <LL_ADC_SetCommonPathInternalCh>
 800177a:	e00c      	b.n	8001796 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001780:	f043 0220 	orr.w	r2, r3, #32
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800178e:	e002      	b.n	8001796 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001790:	bf00      	nop
 8001792:	e000      	b.n	8001796 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001794:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800179e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	37d8      	adds	r7, #216	; 0xd8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	80080000 	.word	0x80080000
 80017b0:	50040300 	.word	0x50040300
 80017b4:	c7520000 	.word	0xc7520000
 80017b8:	50040000 	.word	0x50040000
 80017bc:	50040200 	.word	0x50040200
 80017c0:	20000000 	.word	0x20000000
 80017c4:	053e2d63 	.word	0x053e2d63
 80017c8:	cb840000 	.word	0xcb840000
 80017cc:	80000001 	.word	0x80000001

080017d0 <LL_ADC_IsEnabled>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <LL_ADC_IsEnabled+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_ADC_IsEnabled+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b04      	cmp	r3, #4
 8001808:	d101      	bne.n	800180e <LL_ADC_REG_IsConversionOngoing+0x18>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b09f      	sub	sp, #124	; 0x7c
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001836:	2302      	movs	r3, #2
 8001838:	e093      	b.n	8001962 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001842:	2300      	movs	r3, #0
 8001844:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001846:	2300      	movs	r3, #0
 8001848:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a47      	ldr	r2, [pc, #284]	; (800196c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d102      	bne.n	800185a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	e001      	b.n	800185e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10b      	bne.n	800187c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e072      	b.n	8001962 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ffb9 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 8001884:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ffb3 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d154      	bne.n	8001940 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001898:	2b00      	cmp	r3, #0
 800189a:	d151      	bne.n	8001940 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800189c:	4b35      	ldr	r3, [pc, #212]	; (8001974 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800189e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d02c      	beq.n	8001902 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80018a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ba:	035b      	lsls	r3, r3, #13
 80018bc:	430b      	orrs	r3, r1
 80018be:	431a      	orrs	r2, r3
 80018c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018c4:	4829      	ldr	r0, [pc, #164]	; (800196c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80018c6:	f7ff ff83 	bl	80017d0 <LL_ADC_IsEnabled>
 80018ca:	4604      	mov	r4, r0
 80018cc:	4828      	ldr	r0, [pc, #160]	; (8001970 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80018ce:	f7ff ff7f 	bl	80017d0 <LL_ADC_IsEnabled>
 80018d2:	4603      	mov	r3, r0
 80018d4:	431c      	orrs	r4, r3
 80018d6:	4828      	ldr	r0, [pc, #160]	; (8001978 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80018d8:	f7ff ff7a 	bl	80017d0 <LL_ADC_IsEnabled>
 80018dc:	4603      	mov	r3, r0
 80018de:	4323      	orrs	r3, r4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d137      	bne.n	8001954 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80018e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018ec:	f023 030f 	bic.w	r3, r3, #15
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	6811      	ldr	r1, [r2, #0]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	6892      	ldr	r2, [r2, #8]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018fe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001900:	e028      	b.n	8001954 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800190c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800190e:	4817      	ldr	r0, [pc, #92]	; (800196c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001910:	f7ff ff5e 	bl	80017d0 <LL_ADC_IsEnabled>
 8001914:	4604      	mov	r4, r0
 8001916:	4816      	ldr	r0, [pc, #88]	; (8001970 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001918:	f7ff ff5a 	bl	80017d0 <LL_ADC_IsEnabled>
 800191c:	4603      	mov	r3, r0
 800191e:	431c      	orrs	r4, r3
 8001920:	4815      	ldr	r0, [pc, #84]	; (8001978 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001922:	f7ff ff55 	bl	80017d0 <LL_ADC_IsEnabled>
 8001926:	4603      	mov	r3, r0
 8001928:	4323      	orrs	r3, r4
 800192a:	2b00      	cmp	r3, #0
 800192c:	d112      	bne.n	8001954 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800192e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001936:	f023 030f 	bic.w	r3, r3, #15
 800193a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800193c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800193e:	e009      	b.n	8001954 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001944:	f043 0220 	orr.w	r2, r3, #32
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001952:	e000      	b.n	8001956 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001954:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800195e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001962:	4618      	mov	r0, r3
 8001964:	377c      	adds	r7, #124	; 0x7c
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	50040000 	.word	0x50040000
 8001970:	50040100 	.word	0x50040100
 8001974:	50040300 	.word	0x50040300
 8001978:	50040200 	.word	0x50040200

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <__NVIC_EnableIRQ+0x38>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff8e 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff29 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff3e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff8e 	bl	8001a70 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5d 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff31 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa2 	bl	8001ad8 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	e17f      	b.n	8001eb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8171 	beq.w	8001eaa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <HAL_GPIO_Init+0x40>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d130      	bne.n	8001c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c16:	2201      	movs	r2, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 0201 	and.w	r2, r3, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d118      	bne.n	8001c80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c54:	2201      	movs	r2, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	08db      	lsrs	r3, r3, #3
 8001c6a:	f003 0201 	and.w	r2, r3, #1
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d017      	beq.n	8001cbc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d123      	bne.n	8001d10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	08da      	lsrs	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3208      	adds	r2, #8
 8001cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	08da      	lsrs	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	6939      	ldr	r1, [r7, #16]
 8001d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0203 	and.w	r2, r3, #3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80ac 	beq.w	8001eaa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_GPIO_Init+0x330>)
 8001d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d56:	4a5e      	ldr	r2, [pc, #376]	; (8001ed0 <HAL_GPIO_Init+0x330>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	; (8001ed0 <HAL_GPIO_Init+0x330>)
 8001d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d6a:	4a5a      	ldr	r2, [pc, #360]	; (8001ed4 <HAL_GPIO_Init+0x334>)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d94:	d025      	beq.n	8001de2 <HAL_GPIO_Init+0x242>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4f      	ldr	r2, [pc, #316]	; (8001ed8 <HAL_GPIO_Init+0x338>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01f      	beq.n	8001dde <HAL_GPIO_Init+0x23e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <HAL_GPIO_Init+0x33c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d019      	beq.n	8001dda <HAL_GPIO_Init+0x23a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4d      	ldr	r2, [pc, #308]	; (8001ee0 <HAL_GPIO_Init+0x340>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0x236>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4c      	ldr	r2, [pc, #304]	; (8001ee4 <HAL_GPIO_Init+0x344>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00d      	beq.n	8001dd2 <HAL_GPIO_Init+0x232>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4b      	ldr	r2, [pc, #300]	; (8001ee8 <HAL_GPIO_Init+0x348>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <HAL_GPIO_Init+0x22e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4a      	ldr	r2, [pc, #296]	; (8001eec <HAL_GPIO_Init+0x34c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_GPIO_Init+0x22a>
 8001dc6:	2306      	movs	r3, #6
 8001dc8:	e00c      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e00a      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e008      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e004      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x244>
 8001de2:	2300      	movs	r3, #0
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	f002 0203 	and.w	r2, r2, #3
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	4093      	lsls	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001df4:	4937      	ldr	r1, [pc, #220]	; (8001ed4 <HAL_GPIO_Init+0x334>)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e26:	4a32      	ldr	r2, [pc, #200]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e2c:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e50:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ea4:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <HAL_GPIO_Init+0x350>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f47f ae78 	bne.w	8001bb0 <HAL_GPIO_Init+0x10>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	48000400 	.word	0x48000400
 8001edc:	48000800 	.word	0x48000800
 8001ee0:	48000c00 	.word	0x48000c00
 8001ee4:	48001000 	.word	0x48001000
 8001ee8:	48001400 	.word	0x48001400
 8001eec:	48001800 	.word	0x48001800
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b08f      	sub	sp, #60	; 0x3c
 8001f28:	af0a      	add	r7, sp, #40	; 0x28
 8001f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e116      	b.n	8002164 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f005 fd3f 	bl	80079d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 fd06 	bl	8004986 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	687e      	ldr	r6, [r7, #4]
 8001f82:	466d      	mov	r5, sp
 8001f84:	f106 0410 	add.w	r4, r6, #16
 8001f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f94:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f98:	1d33      	adds	r3, r6, #4
 8001f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f9c:	6838      	ldr	r0, [r7, #0]
 8001f9e:	f002 fc18 	bl	80047d2 <USB_CoreInit>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0d7      	b.n	8002164 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fcf4 	bl	80049a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	e04a      	b.n	800205c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	333d      	adds	r3, #61	; 0x3d
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	333c      	adds	r3, #60	; 0x3c
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	b298      	uxth	r0, r3
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3342      	adds	r3, #66	; 0x42
 8002002:	4602      	mov	r2, r0
 8002004:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	333f      	adds	r3, #63	; 0x3f
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3344      	adds	r3, #68	; 0x44
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	3348      	adds	r3, #72	; 0x48
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	3350      	adds	r3, #80	; 0x50
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	3301      	adds	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3af      	bcc.n	8001fc6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	e044      	b.n	80020f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	3301      	adds	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d3b5      	bcc.n	800206c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	687e      	ldr	r6, [r7, #4]
 8002108:	466d      	mov	r5, sp
 800210a:	f106 0410 	add.w	r4, r6, #16
 800210e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002116:	e894 0003 	ldmia.w	r4, {r0, r1}
 800211a:	e885 0003 	stmia.w	r5, {r0, r1}
 800211e:	1d33      	adds	r3, r6, #4
 8002120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002122:	6838      	ldr	r0, [r7, #0]
 8002124:	f002 fc8c 	bl	8004a40 <USB_DevInit>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e014      	b.n	8002164 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 ff56 	bl	8003004 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fc5e 	bl	8005a1e <USB_DevDisconnect>

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800216c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_PCD_Start+0x1c>
 8002184:	2302      	movs	r3, #2
 8002186:	e01c      	b.n	80021c2 <HAL_PCD_Start+0x56>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f002 fbdb 	bl	8004964 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fc12 	bl	80059dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021ca:	b590      	push	{r4, r7, lr}
 80021cc:	b08d      	sub	sp, #52	; 0x34
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fcd0 	bl	8005b86 <USB_GetMode>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 8384 	bne.w	80028f6 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 fc34 	bl	8005a60 <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 837a 	beq.w	80028f4 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 fc2b 	bl	8005a60 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b02      	cmp	r3, #2
 8002212:	d107      	bne.n	8002224 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f002 0202 	and.w	r2, r2, #2
 8002222:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fc19 	bl	8005a60 <USB_ReadInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b10      	cmp	r3, #16
 8002236:	d161      	bne.n	80022fc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0210 	bic.w	r2, r2, #16
 8002246:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f003 020f 	and.w	r2, r3, #15
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	0c5b      	lsrs	r3, r3, #17
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	2b02      	cmp	r3, #2
 8002272:	d124      	bne.n	80022be <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d035      	beq.n	80022ec <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800228a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6a38      	ldr	r0, [r7, #32]
 8002294:	f003 fa50 	bl	8005738 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a4:	441a      	add	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b6:	441a      	add	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	619a      	str	r2, [r3, #24]
 80022bc:	e016      	b.n	80022ec <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	0c5b      	lsrs	r3, r3, #17
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d110      	bne.n	80022ec <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022d0:	2208      	movs	r2, #8
 80022d2:	4619      	mov	r1, r3
 80022d4:	6a38      	ldr	r0, [r7, #32]
 80022d6:	f003 fa2f 	bl	8005738 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e6:	441a      	add	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0210 	orr.w	r2, r2, #16
 80022fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fbad 	bl	8005a60 <USB_ReadInterrupts>
 8002306:	4603      	mov	r3, r0
 8002308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002310:	d16e      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fbb3 	bl	8005a86 <USB_ReadDevAllOutEpInterrupt>
 8002320:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002322:	e062      	b.n	80023ea <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d057      	beq.n	80023de <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fbd8 	bl	8005aee <USB_ReadDevOutEPInterrupt>
 800233e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002356:	461a      	mov	r2, r3
 8002358:	2301      	movs	r3, #1
 800235a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800235c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fd76 	bl	8002e50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237a:	461a      	mov	r2, r3
 800237c:	2308      	movs	r3, #8
 800237e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fdb2 	bl	8002eec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d008      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239e:	461a      	mov	r2, r3
 80023a0:	2310      	movs	r3, #16
 80023a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ba:	461a      	mov	r2, r3
 80023bc:	2320      	movs	r3, #32
 80023be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d6:	461a      	mov	r2, r3
 80023d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	3301      	adds	r3, #1
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d199      	bne.n	8002324 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 fb33 	bl	8005a60 <USB_ReadInterrupts>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002400:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002404:	f040 808c 	bne.w	8002520 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f003 fb54 	bl	8005aba <USB_ReadDevAllInEpInterrupt>
 8002412:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002418:	e07e      	b.n	8002518 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d073      	beq.n	800250c <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fb7b 	bl	8005b2a <USB_ReadDevInEPInterrupt>
 8002434:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	2201      	movs	r2, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	43db      	mvns	r3, r3
 800245a:	69f9      	ldr	r1, [r7, #28]
 800245c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002460:	4013      	ands	r3, r2
 8002462:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002470:	461a      	mov	r2, r3
 8002472:	2301      	movs	r3, #1
 8002474:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4619      	mov	r1, r3
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f005 fb3c 	bl	8007afa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002498:	461a      	mov	r2, r3
 800249a:	2308      	movs	r3, #8
 800249c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b4:	461a      	mov	r2, r3
 80024b6:	2310      	movs	r3, #16
 80024b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d0:	461a      	mov	r2, r3
 80024d2:	2340      	movs	r3, #64	; 0x40
 80024d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00c      	beq.n	80024fa <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e2:	6a38      	ldr	r0, [r7, #32]
 80024e4:	f002 fbf8 	bl	8004cd8 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f4:	461a      	mov	r2, r3
 80024f6:	2302      	movs	r3, #2
 80024f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fc1a 	bl	8002d40 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	3301      	adds	r3, #1
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	2b00      	cmp	r3, #0
 800251c:	f47f af7d 	bne.w	800241a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fa9b 	bl	8005a60 <USB_ReadInterrupts>
 800252a:	4603      	mov	r3, r0
 800252c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002534:	d122      	bne.n	800257c <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002550:	2b01      	cmp	r3, #1
 8002552:	d108      	bne.n	8002566 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800255c:	2100      	movs	r1, #0
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f005 fde4 	bl	800812c <HAL_PCDEx_LPM_Callback>
 8002564:	e002      	b.n	800256c <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f005 fb34 	bl	8007bd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800257a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fa6d 	bl	8005a60 <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002590:	d112      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f005 faf0 	bl	8007b88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 fa4f 	bl	8005a60 <USB_ReadInterrupts>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025cc:	d121      	bne.n	8002612 <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80025dc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d111      	bne.n	800260c <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	f003 020f 	and.w	r2, r3, #15
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002602:	2101      	movs	r1, #1
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f005 fd91 	bl	800812c <HAL_PCDEx_LPM_Callback>
 800260a:	e002      	b.n	8002612 <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f005 fabb 	bl	8007b88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f003 fa22 	bl	8005a60 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002626:	f040 80b5 	bne.w	8002794 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2110      	movs	r1, #16
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fb47 	bl	8004cd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264e:	e046      	b.n	80026de <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800265c:	461a      	mov	r2, r3
 800265e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002662:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002674:	0151      	lsls	r1, r2, #5
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	440a      	add	r2, r1
 800267a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800267e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002682:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4413      	add	r3, r2
 800268c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002690:	461a      	mov	r2, r3
 8002692:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002696:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a8:	0151      	lsls	r1, r2, #5
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	440a      	add	r2, r1
 80026ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c8:	0151      	lsls	r1, r2, #5
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	440a      	add	r2, r1
 80026ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	3301      	adds	r3, #1
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3b3      	bcc.n	8002650 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	2b00      	cmp	r3, #0
 8002702:	d016      	beq.n	8002732 <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002714:	f043 030b 	orr.w	r3, r3, #11
 8002718:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272a:	f043 030b 	orr.w	r3, r3, #11
 800272e:	6453      	str	r3, [r2, #68]	; 0x44
 8002730:	e015      	b.n	800275e <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002740:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002744:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002748:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002758:	f043 030b 	orr.w	r3, r3, #11
 800275c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800276c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002770:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f003 fa32 	bl	8005be8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f003 f961 	bl	8005a60 <USB_ReadInterrupts>
 800279e:	4603      	mov	r3, r0
 80027a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a8:	d124      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 f9f7 	bl	8005ba2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fb06 	bl	8004dca <USB_GetDevSpeed>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681c      	ldr	r4, [r3, #0]
 80027ca:	f001 fa27 	bl	8003c1c <HAL_RCC_GetHCLKFreq>
 80027ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	4620      	mov	r0, r4
 80027da:	f002 f827 	bl	800482c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f005 f9b3 	bl	8007b4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 f931 	bl	8005a60 <USB_ReadInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b08      	cmp	r3, #8
 8002806:	d10a      	bne.n	800281e <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f005 f990 	bl	8007b2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f002 0208 	and.w	r2, r2, #8
 800281c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 f91c 	bl	8005a60 <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002832:	d10f      	bne.n	8002854 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	b2db      	uxtb	r3, r3
 800283c:	4619      	mov	r1, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f005 fa02 	bl	8007c48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 f901 	bl	8005a60 <USB_ReadInterrupts>
 800285e:	4603      	mov	r3, r0
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002868:	d10f      	bne.n	800288a <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f005 f9d5 	bl	8007c24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 f8e6 	bl	8005a60 <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d10a      	bne.n	80028b6 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f005 f9e3 	bl	8007c6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 f8d0 	bl	8005a60 <USB_ReadInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d115      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f005 f9d3 	bl	8007c88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	e000      	b.n	80028f6 <HAL_PCD_IRQHandler+0x72c>
      return;
 80028f4:	bf00      	nop
    }
  }
}
 80028f6:	3734      	adds	r7, #52	; 0x34
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd90      	pop	{r4, r7, pc}

080028fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_PCD_SetAddress+0x1a>
 8002912:	2302      	movs	r3, #2
 8002914:	e013      	b.n	800293e <HAL_PCD_SetAddress+0x42>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f003 f82e 	bl	8005990 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	4608      	mov	r0, r1
 8002950:	4611      	mov	r1, r2
 8002952:	461a      	mov	r2, r3
 8002954:	4603      	mov	r3, r0
 8002956:	70fb      	strb	r3, [r7, #3]
 8002958:	460b      	mov	r3, r1
 800295a:	803b      	strh	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002968:	2b00      	cmp	r3, #0
 800296a:	da0f      	bge.n	800298c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	3338      	adds	r3, #56	; 0x38
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	705a      	strb	r2, [r3, #1]
 800298a:	e00f      	b.n	80029ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 020f 	and.w	r2, r3, #15
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	3304      	adds	r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029b8:	883a      	ldrh	r2, [r7, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	78ba      	ldrb	r2, [r7, #2]
 80029c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	785b      	ldrb	r3, [r3, #1]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029d6:	78bb      	ldrb	r3, [r7, #2]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d102      	bne.n	80029e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_PCD_EP_Open+0xaa>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e00e      	b.n	8002a0e <HAL_PCD_EP_Open+0xc8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68f9      	ldr	r1, [r7, #12]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fa02 	bl	8004e08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	da0f      	bge.n	8002a4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 020f 	and.w	r2, r3, #15
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	3338      	adds	r3, #56	; 0x38
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3304      	adds	r3, #4
 8002a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	705a      	strb	r2, [r3, #1]
 8002a48:	e00f      	b.n	8002a6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	3304      	adds	r3, #4
 8002a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_PCD_EP_Close+0x6e>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e00e      	b.n	8002aa2 <HAL_PCD_EP_Close+0x8c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68f9      	ldr	r1, [r7, #12]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 fa40 	bl	8004f18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aba:	7afb      	ldrb	r3, [r7, #11]
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aec:	7afb      	ldrb	r3, [r7, #11]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002af8:	7afb      	ldrb	r3, [r7, #11]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6979      	ldr	r1, [r7, #20]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 fcbd 	bl	8005488 <USB_EP0StartXfer>
 8002b0e:	e005      	b.n	8002b1c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6979      	ldr	r1, [r7, #20]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 fada 	bl	80050d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b48:	681b      	ldr	r3, [r3, #0]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	460b      	mov	r3, r1
 8002b64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b66:	7afb      	ldrb	r3, [r7, #11]
 8002b68:	f003 020f 	and.w	r2, r3, #15
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	3338      	adds	r3, #56	; 0x38
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2201      	movs	r2, #1
 8002b94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b96:	7afb      	ldrb	r3, [r7, #11]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ba2:	7afb      	ldrb	r3, [r7, #11]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d106      	bne.n	8002bba <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6979      	ldr	r1, [r7, #20]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fc68 	bl	8005488 <USB_EP0StartXfer>
 8002bb8:	e005      	b.n	8002bc6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6979      	ldr	r1, [r7, #20]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fa85 	bl	80050d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	f003 020f 	and.w	r2, r3, #15
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d901      	bls.n	8002bee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e04e      	b.n	8002c8c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	da0f      	bge.n	8002c16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	3338      	adds	r3, #56	; 0x38
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	705a      	strb	r2, [r3, #1]
 8002c14:	e00d      	b.n	8002c32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_PCD_EP_SetStall+0x82>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e01c      	b.n	8002c8c <HAL_PCD_EP_SetStall+0xbc>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68f9      	ldr	r1, [r7, #12]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 fdc1 	bl	80057e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d108      	bne.n	8002c82 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f002 ffb3 	bl	8005be8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	f003 020f 	and.w	r2, r3, #15
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d901      	bls.n	8002cb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e042      	b.n	8002d38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da0f      	bge.n	8002cda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 020f 	and.w	r2, r3, #15
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	3338      	adds	r3, #56	; 0x38
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	3304      	adds	r3, #4
 8002cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	705a      	strb	r2, [r3, #1]
 8002cd8:	e00f      	b.n	8002cfa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 020f 	and.w	r2, r3, #15
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_PCD_EP_ClrStall+0x86>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e00e      	b.n	8002d38 <HAL_PCD_EP_ClrStall+0xa4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f002 fdcb 	bl	80058c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	3338      	adds	r3, #56	; 0x38
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	3304      	adds	r3, #4
 8002d66:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d901      	bls.n	8002d78 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e067      	b.n	8002e48 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d902      	bls.n	8002d94 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	3303      	adds	r3, #3
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d9c:	e026      	b.n	8002dec <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d902      	bls.n	8002dba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3303      	adds	r3, #3
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68d9      	ldr	r1, [r3, #12]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f002 fc78 	bl	80056c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	441a      	add	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	441a      	add	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d809      	bhi.n	8002e16 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d203      	bcs.n	8002e16 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1c3      	bne.n	8002d9e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d811      	bhi.n	8002e46 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	2201      	movs	r2, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	6939      	ldr	r1, [r7, #16]
 8002e3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e42:	4013      	ands	r3, r2
 8002e44:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	333c      	adds	r3, #60	; 0x3c
 8002e68:	3304      	adds	r3, #4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <PCD_EP_OutXfrComplete_int+0x98>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d124      	bne.n	8002ed0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea2:	6093      	str	r3, [r2, #8]
 8002ea4:	e01a      	b.n	8002edc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f004 fdfb 	bl	8007ac4 <HAL_PCD_DataOutStageCallback>
 8002ece:	e005      	b.n	8002edc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f004 fdf4 	bl	8007ac4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	4f54310a 	.word	0x4f54310a

08002eec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	333c      	adds	r3, #60	; 0x3c
 8002f04:	3304      	adds	r3, #4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <PCD_EP_OutSetupPacket_int+0x64>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d90e      	bls.n	8002f40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f004 fdad 	bl	8007aa0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	4f54300a 	.word	0x4f54300a

08002f54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
 8002f60:	4613      	mov	r3, r2
 8002f62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d107      	bne.n	8002f82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f72:	883b      	ldrh	r3, [r7, #0]
 8002f74:	0419      	lsls	r1, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f80:	e028      	b.n	8002fd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	e00d      	b.n	8002fb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	3340      	adds	r3, #64	; 0x40
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4413      	add	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3ec      	bcc.n	8002f96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fbc:	883b      	ldrh	r3, [r7, #0]
 8002fbe:	0418      	lsls	r0, r3, #16
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	4302      	orrs	r2, r0
 8002fcc:	3340      	adds	r3, #64	; 0x40
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003036:	f043 0303 	orr.w	r3, r3, #3
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40007000 	.word	0x40007000

0800306c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <HAL_PWREx_GetVoltageRange+0x18>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40007000 	.word	0x40007000

08003088 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003096:	d130      	bne.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003098:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a4:	d038      	beq.n	8003118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ae:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2232      	movs	r2, #50	; 0x32
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0c9b      	lsrs	r3, r3, #18
 80030c8:	3301      	adds	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030cc:	e002      	b.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e0:	d102      	bne.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f2      	bne.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f4:	d110      	bne.n	8003118 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e00f      	b.n	800311a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003106:	d007      	beq.n	8003118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003110:	4a05      	ldr	r2, [pc, #20]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003116:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40007000 	.word	0x40007000
 800312c:	20000000 	.word	0x20000000
 8003130:	431bde83 	.word	0x431bde83

08003134 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_PWREx_EnableVddUSB+0x1c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <HAL_PWREx_EnableVddUSB+0x1c>)
 800313e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003142:	6053      	str	r3, [r2, #4]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40007000 	.word	0x40007000

08003154 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_PWREx_EnableVddIO2+0x1c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_PWREx_EnableVddIO2+0x1c>)
 800315e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003162:	6053      	str	r3, [r2, #4]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40007000 	.word	0x40007000

08003174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e3d4      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003186:	4ba1      	ldr	r3, [pc, #644]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003190:	4b9e      	ldr	r3, [pc, #632]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80e4 	beq.w	8003370 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_RCC_OscConfig+0x4a>
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	f040 808b 	bne.w	80032cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f040 8087 	bne.w	80032cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031be:	4b93      	ldr	r3, [pc, #588]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RCC_OscConfig+0x62>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e3ac      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1a      	ldr	r2, [r3, #32]
 80031da:	4b8c      	ldr	r3, [pc, #560]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_RCC_OscConfig+0x7c>
 80031e6:	4b89      	ldr	r3, [pc, #548]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ee:	e005      	b.n	80031fc <HAL_RCC_OscConfig+0x88>
 80031f0:	4b86      	ldr	r3, [pc, #536]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80031f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d223      	bcs.n	8003248 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fd15 	bl	8003c34 <RCC_SetFlashLatencyFromMSIRange>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e38d      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003214:	4b7d      	ldr	r3, [pc, #500]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a7c      	ldr	r2, [pc, #496]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800321a:	f043 0308 	orr.w	r3, r3, #8
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b7a      	ldr	r3, [pc, #488]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4977      	ldr	r1, [pc, #476]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003232:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	4972      	ldr	r1, [pc, #456]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
 8003246:	e025      	b.n	8003294 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003248:	4b70      	ldr	r3, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6f      	ldr	r2, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800324e:	f043 0308 	orr.w	r3, r3, #8
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b6d      	ldr	r3, [pc, #436]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	496a      	ldr	r1, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003266:	4b69      	ldr	r3, [pc, #420]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	4965      	ldr	r1, [pc, #404]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d109      	bne.n	8003294 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fcd5 	bl	8003c34 <RCC_SetFlashLatencyFromMSIRange>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e34d      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003294:	f000 fc36 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	495a      	ldr	r1, [pc, #360]	; (8003410 <HAL_RCC_OscConfig+0x29c>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
 80032b0:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_RCC_OscConfig+0x2a0>)
 80032b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032b4:	4b58      	ldr	r3, [pc, #352]	; (8003418 <HAL_RCC_OscConfig+0x2a4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd fb37 	bl	800092c <HAL_InitTick>
 80032be:	4603      	mov	r3, r0
 80032c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d052      	beq.n	800336e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	e331      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d032      	beq.n	800333a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032d4:	4b4d      	ldr	r3, [pc, #308]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a4c      	ldr	r2, [pc, #304]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e0:	f7fd fb74 	bl	80009cc <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e8:	f7fd fb70 	bl	80009cc <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e31a      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032fa:	4b44      	ldr	r3, [pc, #272]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a40      	ldr	r2, [pc, #256]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800330c:	f043 0308 	orr.w	r3, r3, #8
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b3e      	ldr	r3, [pc, #248]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	493b      	ldr	r1, [pc, #236]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003324:	4b39      	ldr	r3, [pc, #228]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	4936      	ldr	r1, [pc, #216]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
 8003338:	e01a      	b.n	8003370 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800333a:	4b34      	ldr	r3, [pc, #208]	; (800340c <HAL_RCC_OscConfig+0x298>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a33      	ldr	r2, [pc, #204]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003346:	f7fd fb41 	bl	80009cc <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800334e:	f7fd fb3d 	bl	80009cc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e2e7      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003360:	4b2a      	ldr	r3, [pc, #168]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x1da>
 800336c:	e000      	b.n	8003370 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800336e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d074      	beq.n	8003466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b08      	cmp	r3, #8
 8003380:	d005      	beq.n	800338e <HAL_RCC_OscConfig+0x21a>
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d10e      	bne.n	80033a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d10b      	bne.n	80033a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338e:	4b1f      	ldr	r3, [pc, #124]	; (800340c <HAL_RCC_OscConfig+0x298>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d064      	beq.n	8003464 <HAL_RCC_OscConfig+0x2f0>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d160      	bne.n	8003464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e2c4      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x24a>
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a15      	ldr	r2, [pc, #84]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	e01d      	b.n	80033fa <HAL_RCC_OscConfig+0x286>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCC_OscConfig+0x26e>
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0f      	ldr	r2, [pc, #60]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	e00b      	b.n	80033fa <HAL_RCC_OscConfig+0x286>
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a06      	ldr	r2, [pc, #24]	; (800340c <HAL_RCC_OscConfig+0x298>)
 80033f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01c      	beq.n	800343c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fd fae3 	bl	80009cc <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003408:	e011      	b.n	800342e <HAL_RCC_OscConfig+0x2ba>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	080082bc 	.word	0x080082bc
 8003414:	20000000 	.word	0x20000000
 8003418:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fad6 	bl	80009cc <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e280      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342e:	4baf      	ldr	r3, [pc, #700]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x2a8>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd fac6 	bl	80009cc <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fd fac2 	bl	80009cc <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e26c      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003456:	4ba5      	ldr	r3, [pc, #660]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x2d0>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d060      	beq.n	8003534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d005      	beq.n	8003484 <HAL_RCC_OscConfig+0x310>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d119      	bne.n	80034b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d116      	bne.n	80034b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	4b99      	ldr	r3, [pc, #612]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_OscConfig+0x328>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e249      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b93      	ldr	r3, [pc, #588]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	4990      	ldr	r1, [pc, #576]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b0:	e040      	b.n	8003534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d023      	beq.n	8003502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ba:	4b8c      	ldr	r3, [pc, #560]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a8b      	ldr	r2, [pc, #556]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fd fa81 	bl	80009cc <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fd fa7d 	bl	80009cc <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e227      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e0:	4b82      	ldr	r3, [pc, #520]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	497c      	ldr	r1, [pc, #496]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
 8003500:	e018      	b.n	8003534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b7a      	ldr	r3, [pc, #488]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a79      	ldr	r2, [pc, #484]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd fa5d 	bl	80009cc <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fd fa59 	bl	80009cc <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e203      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003528:	4b70      	ldr	r3, [pc, #448]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d03c      	beq.n	80035ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01c      	beq.n	8003582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003548:	4b68      	ldr	r3, [pc, #416]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354e:	4a67      	ldr	r2, [pc, #412]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fd fa38 	bl	80009cc <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003560:	f7fd fa34 	bl	80009cc <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e1de      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003572:	4b5e      	ldr	r3, [pc, #376]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ef      	beq.n	8003560 <HAL_RCC_OscConfig+0x3ec>
 8003580:	e01b      	b.n	80035ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003582:	4b5a      	ldr	r3, [pc, #360]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003588:	4a58      	ldr	r2, [pc, #352]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fd fa1b 	bl	80009cc <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359a:	f7fd fa17 	bl	80009cc <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1c1      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ac:	4b4f      	ldr	r3, [pc, #316]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ef      	bne.n	800359a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a6 	beq.w	8003714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035cc:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4b44      	ldr	r3, [pc, #272]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	4a43      	ldr	r2, [pc, #268]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e2:	6593      	str	r3, [r2, #88]	; 0x58
 80035e4:	4b41      	ldr	r3, [pc, #260]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f4:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <HAL_RCC_OscConfig+0x57c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d118      	bne.n	8003632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003600:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <HAL_RCC_OscConfig+0x57c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a3a      	ldr	r2, [pc, #232]	; (80036f0 <HAL_RCC_OscConfig+0x57c>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360c:	f7fd f9de 	bl	80009cc <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003614:	f7fd f9da 	bl	80009cc <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e184      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003626:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <HAL_RCC_OscConfig+0x57c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d108      	bne.n	800364c <HAL_RCC_OscConfig+0x4d8>
 800363a:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	4a2a      	ldr	r2, [pc, #168]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800364a:	e024      	b.n	8003696 <HAL_RCC_OscConfig+0x522>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b05      	cmp	r3, #5
 8003652:	d110      	bne.n	8003676 <HAL_RCC_OscConfig+0x502>
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	4a24      	ldr	r2, [pc, #144]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003664:	4b21      	ldr	r3, [pc, #132]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	4a20      	ldr	r2, [pc, #128]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003674:	e00f      	b.n	8003696 <HAL_RCC_OscConfig+0x522>
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	4a17      	ldr	r2, [pc, #92]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 800368e:	f023 0304 	bic.w	r3, r3, #4
 8003692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369e:	f7fd f995 	bl	80009cc <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a4:	e00a      	b.n	80036bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fd f991 	bl	80009cc <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e139      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_OscConfig+0x578>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ed      	beq.n	80036a6 <HAL_RCC_OscConfig+0x532>
 80036ca:	e01a      	b.n	8003702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fd f97e 	bl	80009cc <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d2:	e00f      	b.n	80036f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fd f97a 	bl	80009cc <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d906      	bls.n	80036f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e122      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f4:	4b90      	ldr	r3, [pc, #576]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e8      	bne.n	80036d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003702:	7ffb      	ldrb	r3, [r7, #31]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b8b      	ldr	r3, [pc, #556]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	4a8a      	ldr	r2, [pc, #552]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800370e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8108 	beq.w	800392e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	2b02      	cmp	r3, #2
 8003724:	f040 80d0 	bne.w	80038c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003728:	4b83      	ldr	r3, [pc, #524]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f003 0203 	and.w	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	429a      	cmp	r2, r3
 800373a:	d130      	bne.n	800379e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	3b01      	subs	r3, #1
 8003748:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d127      	bne.n	800379e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003758:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d11f      	bne.n	800379e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003768:	2a07      	cmp	r2, #7
 800376a:	bf14      	ite	ne
 800376c:	2201      	movne	r2, #1
 800376e:	2200      	moveq	r2, #0
 8003770:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003772:	4293      	cmp	r3, r2
 8003774:	d113      	bne.n	800379e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d109      	bne.n	800379e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	3b01      	subs	r3, #1
 8003798:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d06e      	beq.n	800387c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b0c      	cmp	r3, #12
 80037a2:	d069      	beq.n	8003878 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037a4:	4b64      	ldr	r3, [pc, #400]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037b0:	4b61      	ldr	r3, [pc, #388]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b7      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037c0:	4b5d      	ldr	r3, [pc, #372]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a5c      	ldr	r2, [pc, #368]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80037c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037cc:	f7fd f8fe 	bl	80009cc <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fd f8fa 	bl	80009cc <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0a4      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e6:	4b54      	ldr	r3, [pc, #336]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f2:	4b51      	ldr	r3, [pc, #324]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	4b51      	ldr	r3, [pc, #324]	; (800393c <HAL_RCC_OscConfig+0x7c8>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003802:	3a01      	subs	r2, #1
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800380c:	0212      	lsls	r2, r2, #8
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003814:	0852      	lsrs	r2, r2, #1
 8003816:	3a01      	subs	r2, #1
 8003818:	0552      	lsls	r2, r2, #21
 800381a:	4311      	orrs	r1, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003820:	0852      	lsrs	r2, r2, #1
 8003822:	3a01      	subs	r2, #1
 8003824:	0652      	lsls	r2, r2, #25
 8003826:	4311      	orrs	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800382c:	0912      	lsrs	r2, r2, #4
 800382e:	0452      	lsls	r2, r2, #17
 8003830:	430a      	orrs	r2, r1
 8003832:	4941      	ldr	r1, [pc, #260]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 8003834:	4313      	orrs	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003838:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a3e      	ldr	r2, [pc, #248]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003844:	4b3c      	ldr	r3, [pc, #240]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4a3b      	ldr	r2, [pc, #236]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003850:	f7fd f8bc 	bl	80009cc <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd f8b8 	bl	80009cc <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e062      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386a:	4b33      	ldr	r3, [pc, #204]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003876:	e05a      	b.n	800392e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e059      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387c:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d152      	bne.n	800392e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003888:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2a      	ldr	r2, [pc, #168]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800388e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003892:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003894:	4b28      	ldr	r3, [pc, #160]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a27      	ldr	r2, [pc, #156]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800389a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038a0:	f7fd f894 	bl	80009cc <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fd f890 	bl	80009cc <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e03a      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x734>
 80038c6:	e032      	b.n	800392e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d02d      	beq.n	800392a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a19      	ldr	r2, [pc, #100]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80038d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80038da:	4b17      	ldr	r3, [pc, #92]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4a13      	ldr	r2, [pc, #76]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80038ec:	f023 0303 	bic.w	r3, r3, #3
 80038f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038f2:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 80038f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003900:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fd f863 	bl	80009cc <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390a:	f7fd f85f 	bl	80009cc <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e009      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_OscConfig+0x7c4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f0      	bne.n	800390a <HAL_RCC_OscConfig+0x796>
 8003928:	e001      	b.n	800392e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	f99d808c 	.word	0xf99d808c

08003940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0c8      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003954:	4b66      	ldr	r3, [pc, #408]	; (8003af0 <HAL_RCC_ClockConfig+0x1b0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d910      	bls.n	8003984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <HAL_RCC_ClockConfig+0x1b0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0207 	bic.w	r2, r3, #7
 800396a:	4961      	ldr	r1, [pc, #388]	; (8003af0 <HAL_RCC_ClockConfig+0x1b0>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b5f      	ldr	r3, [pc, #380]	; (8003af0 <HAL_RCC_ClockConfig+0x1b0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0b0      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d04c      	beq.n	8003a2a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003998:	4b56      	ldr	r3, [pc, #344]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d121      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e09e      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039b0:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d115      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e092      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039c8:	4b4a      	ldr	r3, [pc, #296]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e086      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d8:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e07e      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e8:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f023 0203 	bic.w	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	493f      	ldr	r1, [pc, #252]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fa:	f7fc ffe7 	bl	80009cc <HAL_GetTick>
 80039fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a00:	e00a      	b.n	8003a18 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a02:	f7fc ffe3 	bl	80009cc <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e066      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 020c 	and.w	r2, r3, #12
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d1eb      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a36:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	492c      	ldr	r1, [pc, #176]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a48:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d210      	bcs.n	8003a78 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 0207 	bic.w	r2, r3, #7
 8003a5e:	4924      	ldr	r1, [pc, #144]	; (8003af0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <HAL_RCC_ClockConfig+0x1b0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e036      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4918      	ldr	r1, [pc, #96]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4910      	ldr	r1, [pc, #64]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab6:	f000 f825 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <HAL_RCC_ClockConfig+0x1b4>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	490c      	ldr	r1, [pc, #48]	; (8003af8 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc ff26 	bl	800092c <HAL_InitTick>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40022000 	.word	0x40022000
 8003af4:	40021000 	.word	0x40021000
 8003af8:	080082bc 	.word	0x080082bc
 8003afc:	20000000 	.word	0x20000000
 8003b00:	20000004 	.word	0x20000004

08003b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b12:	4b3e      	ldr	r3, [pc, #248]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b1c:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x34>
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d121      	bne.n	8003b76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d11e      	bne.n	8003b76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b38:	4b34      	ldr	r3, [pc, #208]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d107      	bne.n	8003b54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b44:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e005      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b54:	4b2d      	ldr	r3, [pc, #180]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b60:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10d      	bne.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d102      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b7c:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e004      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b88:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b0c      	cmp	r3, #12
 8003b90:	d134      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b92:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0xa6>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ba8:	e005      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bac:	617b      	str	r3, [r7, #20]
      break;
 8003bae:	e005      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bb2:	617b      	str	r3, [r7, #20]
      break;
 8003bb4:	e002      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	617b      	str	r3, [r7, #20]
      break;
 8003bba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bbc:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	fb02 f203 	mul.w	r2, r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	0e5b      	lsrs	r3, r3, #25
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	3301      	adds	r3, #1
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	080082cc 	.word	0x080082cc
 8003c14:	00f42400 	.word	0x00f42400
 8003c18:	007a1200 	.word	0x007a1200

08003c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000000 	.word	0x20000000

08003c34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c40:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c4c:	f7ff fa0e 	bl	800306c <HAL_PWREx_GetVoltageRange>
 8003c50:	6178      	str	r0, [r7, #20]
 8003c52:	e014      	b.n	8003c7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	4a24      	ldr	r2, [pc, #144]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c60:	4b22      	ldr	r3, [pc, #136]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c6c:	f7ff f9fe 	bl	800306c <HAL_PWREx_GetVoltageRange>
 8003c70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c72:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c84:	d10b      	bne.n	8003c9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b80      	cmp	r3, #128	; 0x80
 8003c8a:	d919      	bls.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c90:	d902      	bls.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c92:	2302      	movs	r3, #2
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e013      	b.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c98:	2301      	movs	r3, #1
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	e010      	b.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d902      	bls.n	8003caa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	e00a      	b.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d102      	bne.n	8003cb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	e004      	b.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b70      	cmp	r3, #112	; 0x70
 8003cba:	d101      	bne.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 0207 	bic.w	r2, r3, #7
 8003cc8:	4909      	ldr	r1, [pc, #36]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d001      	beq.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40022000 	.word	0x40022000

08003cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d00:	2300      	movs	r3, #0
 8003d02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d041      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d18:	d02a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d1e:	d824      	bhi.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d24:	d008      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d2a:	d81e      	bhi.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d34:	d010      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d36:	e018      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d38:	4b86      	ldr	r3, [pc, #536]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a85      	ldr	r2, [pc, #532]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d44:	e015      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 facb 	bl	80042e8 <RCCEx_PLLSAI1_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d56:	e00c      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3320      	adds	r3, #32
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fbb6 	bl	80044d0 <RCCEx_PLLSAI2_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d68:	e003      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d6e:	e000      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d78:	4b76      	ldr	r3, [pc, #472]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d86:	4973      	ldr	r1, [pc, #460]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d8e:	e001      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d041      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003da8:	d02a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003daa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dae:	d824      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003db6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dba:	d81e      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc4:	d010      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dc6:	e018      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc8:	4b62      	ldr	r3, [pc, #392]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a61      	ldr	r2, [pc, #388]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dd4:	e015      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fa83 	bl	80042e8 <RCCEx_PLLSAI1_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003de6:	e00c      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3320      	adds	r3, #32
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fb6e 	bl	80044d0 <RCCEx_PLLSAI2_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003df8:	e003      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	74fb      	strb	r3, [r7, #19]
      break;
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e08:	4b52      	ldr	r3, [pc, #328]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e16:	494f      	ldr	r1, [pc, #316]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e1e:	e001      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a0 	beq.w	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e36:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e46:	2300      	movs	r3, #0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00d      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	4a40      	ldr	r2, [pc, #256]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6593      	str	r3, [r2, #88]	; 0x58
 8003e58:	4b3e      	ldr	r3, [pc, #248]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e64:	2301      	movs	r3, #1
 8003e66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e68:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a3a      	ldr	r2, [pc, #232]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e74:	f7fc fdaa 	bl	80009cc <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e7a:	e009      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7fc fda6 	bl	80009cc <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d902      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	74fb      	strb	r3, [r7, #19]
        break;
 8003e8e:	e005      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e90:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ef      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d15c      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ea2:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01f      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d019      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ec0:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ecc:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	4a20      	ldr	r2, [pc, #128]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003edc:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fc fd65 	bl	80009cc <HAL_GetTick>
 8003f02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f04:	e00b      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fc fd61 	bl	80009cc <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d902      	bls.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	74fb      	strb	r3, [r7, #19]
            break;
 8003f1c:	e006      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ec      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f42:	4904      	ldr	r1, [pc, #16]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f4a:	e009      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	74bb      	strb	r3, [r7, #18]
 8003f50:	e006      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f60:	7c7b      	ldrb	r3, [r7, #17]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d105      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f66:	4b9e      	ldr	r3, [pc, #632]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	4a9d      	ldr	r2, [pc, #628]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f7e:	4b98      	ldr	r3, [pc, #608]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	f023 0203 	bic.w	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	4994      	ldr	r1, [pc, #592]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fa0:	4b8f      	ldr	r3, [pc, #572]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f023 020c 	bic.w	r2, r3, #12
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	498c      	ldr	r1, [pc, #560]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fc2:	4b87      	ldr	r3, [pc, #540]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	4983      	ldr	r1, [pc, #524]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fe4:	4b7e      	ldr	r3, [pc, #504]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	497b      	ldr	r1, [pc, #492]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004006:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004014:	4972      	ldr	r1, [pc, #456]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004028:	4b6d      	ldr	r3, [pc, #436]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	496a      	ldr	r1, [pc, #424]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	4961      	ldr	r1, [pc, #388]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800406c:	4b5c      	ldr	r3, [pc, #368]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407a:	4959      	ldr	r1, [pc, #356]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800408e:	4b54      	ldr	r3, [pc, #336]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409c:	4950      	ldr	r1, [pc, #320]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040b0:	4b4b      	ldr	r3, [pc, #300]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	4948      	ldr	r1, [pc, #288]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d2:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	493f      	ldr	r1, [pc, #252]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d028      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040f4:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004102:	4937      	ldr	r1, [pc, #220]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800410e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004112:	d106      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004114:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a31      	ldr	r2, [pc, #196]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800411e:	60d3      	str	r3, [r2, #12]
 8004120:	e011      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004126:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800412a:	d10c      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	2101      	movs	r1, #1
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f8d8 	bl	80042e8 <RCCEx_PLLSAI1_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d028      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	491f      	ldr	r1, [pc, #124]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004170:	d106      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004172:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4a1a      	ldr	r2, [pc, #104]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417c:	60d3      	str	r3, [r2, #12]
 800417e:	e011      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004188:	d10c      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	2101      	movs	r1, #1
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f8a9 	bl	80042e8 <RCCEx_PLLSAI1_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d02b      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041be:	4908      	ldr	r1, [pc, #32]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ce:	d109      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a02      	ldr	r2, [pc, #8]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041da:	60d3      	str	r3, [r2, #12]
 80041dc:	e014      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ec:	d10c      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	2101      	movs	r1, #1
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f877 	bl	80042e8 <RCCEx_PLLSAI1_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02f      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004214:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004222:	4928      	ldr	r1, [pc, #160]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004232:	d10d      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	2102      	movs	r1, #2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f854 	bl	80042e8 <RCCEx_PLLSAI1_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d014      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800424a:	7cfb      	ldrb	r3, [r7, #19]
 800424c:	74bb      	strb	r3, [r7, #18]
 800424e:	e011      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004258:	d10c      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3320      	adds	r3, #32
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f935 	bl	80044d0 <RCCEx_PLLSAI2_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004280:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428e:	490d      	ldr	r1, [pc, #52]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b2:	4904      	ldr	r1, [pc, #16]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000

080042c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6013      	str	r3, [r2, #0]
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000

080042e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042f6:	4b75      	ldr	r3, [pc, #468]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d018      	beq.n	8004334 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004302:	4b72      	ldr	r3, [pc, #456]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0203 	and.w	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d10d      	bne.n	800432e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
       ||
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800431a:	4b6c      	ldr	r3, [pc, #432]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
       ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d047      	beq.n	80043be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
 8004332:	e044      	b.n	80043be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d018      	beq.n	800436e <RCCEx_PLLSAI1_Config+0x86>
 800433c:	2b03      	cmp	r3, #3
 800433e:	d825      	bhi.n	800438c <RCCEx_PLLSAI1_Config+0xa4>
 8004340:	2b01      	cmp	r3, #1
 8004342:	d002      	beq.n	800434a <RCCEx_PLLSAI1_Config+0x62>
 8004344:	2b02      	cmp	r3, #2
 8004346:	d009      	beq.n	800435c <RCCEx_PLLSAI1_Config+0x74>
 8004348:	e020      	b.n	800438c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800434a:	4b60      	ldr	r3, [pc, #384]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d11d      	bne.n	8004392 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435a:	e01a      	b.n	8004392 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800435c:	4b5b      	ldr	r3, [pc, #364]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436c:	e013      	b.n	8004396 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800436e:	4b57      	ldr	r3, [pc, #348]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10f      	bne.n	800439a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800437a:	4b54      	ldr	r3, [pc, #336]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800438a:	e006      	b.n	800439a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e004      	b.n	800439c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800439a:	bf00      	nop
    }

    if(status == HAL_OK)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10d      	bne.n	80043be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043a2:	4b4a      	ldr	r3, [pc, #296]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6819      	ldr	r1, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	430b      	orrs	r3, r1
 80043b8:	4944      	ldr	r1, [pc, #272]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d17d      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043c4:	4b41      	ldr	r3, [pc, #260]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a40      	ldr	r2, [pc, #256]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d0:	f7fc fafc 	bl	80009cc <HAL_GetTick>
 80043d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043d6:	e009      	b.n	80043ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d8:	f7fc faf8 	bl	80009cc <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d902      	bls.n	80043ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	73fb      	strb	r3, [r7, #15]
        break;
 80043ea:	e005      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ec:	4b37      	ldr	r3, [pc, #220]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1ef      	bne.n	80043d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d160      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d111      	bne.n	8004428 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004404:	4b31      	ldr	r3, [pc, #196]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800440c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6892      	ldr	r2, [r2, #8]
 8004414:	0211      	lsls	r1, r2, #8
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68d2      	ldr	r2, [r2, #12]
 800441a:	0912      	lsrs	r2, r2, #4
 800441c:	0452      	lsls	r2, r2, #17
 800441e:	430a      	orrs	r2, r1
 8004420:	492a      	ldr	r1, [pc, #168]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004422:	4313      	orrs	r3, r2
 8004424:	610b      	str	r3, [r1, #16]
 8004426:	e027      	b.n	8004478 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d112      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800442e:	4b27      	ldr	r3, [pc, #156]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004436:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6892      	ldr	r2, [r2, #8]
 800443e:	0211      	lsls	r1, r2, #8
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6912      	ldr	r2, [r2, #16]
 8004444:	0852      	lsrs	r2, r2, #1
 8004446:	3a01      	subs	r2, #1
 8004448:	0552      	lsls	r2, r2, #21
 800444a:	430a      	orrs	r2, r1
 800444c:	491f      	ldr	r1, [pc, #124]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800444e:	4313      	orrs	r3, r2
 8004450:	610b      	str	r3, [r1, #16]
 8004452:	e011      	b.n	8004478 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004454:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800445c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6892      	ldr	r2, [r2, #8]
 8004464:	0211      	lsls	r1, r2, #8
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6952      	ldr	r2, [r2, #20]
 800446a:	0852      	lsrs	r2, r2, #1
 800446c:	3a01      	subs	r2, #1
 800446e:	0652      	lsls	r2, r2, #25
 8004470:	430a      	orrs	r2, r1
 8004472:	4916      	ldr	r1, [pc, #88]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004478:	4b14      	ldr	r3, [pc, #80]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800447e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004482:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fc faa2 	bl	80009cc <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800448a:	e009      	b.n	80044a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800448c:	f7fc fa9e 	bl	80009cc <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d902      	bls.n	80044a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	73fb      	strb	r3, [r7, #15]
          break;
 800449e:	e005      	b.n	80044ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0ef      	beq.n	800448c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	4904      	ldr	r1, [pc, #16]	; (80044cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000

080044d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044de:	4b6a      	ldr	r3, [pc, #424]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d018      	beq.n	800451c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044ea:	4b67      	ldr	r3, [pc, #412]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0203 	and.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d10d      	bne.n	8004516 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
       ||
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004502:	4b61      	ldr	r3, [pc, #388]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
       ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d047      	beq.n	80045a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	e044      	b.n	80045a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d018      	beq.n	8004556 <RCCEx_PLLSAI2_Config+0x86>
 8004524:	2b03      	cmp	r3, #3
 8004526:	d825      	bhi.n	8004574 <RCCEx_PLLSAI2_Config+0xa4>
 8004528:	2b01      	cmp	r3, #1
 800452a:	d002      	beq.n	8004532 <RCCEx_PLLSAI2_Config+0x62>
 800452c:	2b02      	cmp	r3, #2
 800452e:	d009      	beq.n	8004544 <RCCEx_PLLSAI2_Config+0x74>
 8004530:	e020      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004532:	4b55      	ldr	r3, [pc, #340]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d11d      	bne.n	800457a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004542:	e01a      	b.n	800457a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004544:	4b50      	ldr	r3, [pc, #320]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454c:	2b00      	cmp	r3, #0
 800454e:	d116      	bne.n	800457e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004554:	e013      	b.n	800457e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004556:	4b4c      	ldr	r3, [pc, #304]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004562:	4b49      	ldr	r3, [pc, #292]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004572:	e006      	b.n	8004582 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      break;
 8004578:	e004      	b.n	8004584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800457a:	bf00      	nop
 800457c:	e002      	b.n	8004584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800457e:	bf00      	nop
 8004580:	e000      	b.n	8004584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004582:	bf00      	nop
    }

    if(status == HAL_OK)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10d      	bne.n	80045a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800458a:	4b3f      	ldr	r3, [pc, #252]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6819      	ldr	r1, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	3b01      	subs	r3, #1
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	430b      	orrs	r3, r1
 80045a0:	4939      	ldr	r1, [pc, #228]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d167      	bne.n	800467c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045ac:	4b36      	ldr	r3, [pc, #216]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a35      	ldr	r2, [pc, #212]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b8:	f7fc fa08 	bl	80009cc <HAL_GetTick>
 80045bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045be:	e009      	b.n	80045d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045c0:	f7fc fa04 	bl	80009cc <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d902      	bls.n	80045d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	73fb      	strb	r3, [r7, #15]
        break;
 80045d2:	e005      	b.n	80045e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045d4:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ef      	bne.n	80045c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d14a      	bne.n	800467c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d111      	bne.n	8004610 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045ec:	4b26      	ldr	r3, [pc, #152]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6892      	ldr	r2, [r2, #8]
 80045fc:	0211      	lsls	r1, r2, #8
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68d2      	ldr	r2, [r2, #12]
 8004602:	0912      	lsrs	r2, r2, #4
 8004604:	0452      	lsls	r2, r2, #17
 8004606:	430a      	orrs	r2, r1
 8004608:	491f      	ldr	r1, [pc, #124]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460a:	4313      	orrs	r3, r2
 800460c:	614b      	str	r3, [r1, #20]
 800460e:	e011      	b.n	8004634 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004610:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6892      	ldr	r2, [r2, #8]
 8004620:	0211      	lsls	r1, r2, #8
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6912      	ldr	r2, [r2, #16]
 8004626:	0852      	lsrs	r2, r2, #1
 8004628:	3a01      	subs	r2, #1
 800462a:	0652      	lsls	r2, r2, #25
 800462c:	430a      	orrs	r2, r1
 800462e:	4916      	ldr	r1, [pc, #88]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004630:	4313      	orrs	r3, r2
 8004632:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004634:	4b14      	ldr	r3, [pc, #80]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a13      	ldr	r2, [pc, #76]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800463a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fc f9c4 	bl	80009cc <HAL_GetTick>
 8004644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004646:	e009      	b.n	800465c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004648:	f7fc f9c0 	bl	80009cc <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d902      	bls.n	800465c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	73fb      	strb	r3, [r7, #15]
          break;
 800465a:	e005      	b.n	8004668 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0ef      	beq.n	8004648 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	4904      	ldr	r1, [pc, #16]	; (8004688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004678:	4313      	orrs	r3, r2
 800467a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000

0800468c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e095      	b.n	80047ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d108      	bne.n	80046b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ae:	d009      	beq.n	80046c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	61da      	str	r2, [r3, #28]
 80046b6:	e005      	b.n	80046c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc f858 	bl	8000794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004704:	d902      	bls.n	800470c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e002      	b.n	8004712 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800470c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004710:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800471a:	d007      	beq.n	800472c <HAL_SPI_Init+0xa0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004724:	d002      	beq.n	800472c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	ea42 0103 	orr.w	r1, r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	0c1b      	lsrs	r3, r3, #16
 8004788:	f003 0204 	and.w	r2, r3, #4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047a8:	ea42 0103 	orr.w	r1, r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047d2:	b084      	sub	sp, #16
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	f107 001c 	add.w	r0, r7, #28
 80047e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 fa41 	bl	8005c78 <USB_CoreReset>
 80047f6:	4603      	mov	r3, r0
 80047f8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80047fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d106      	bne.n	800480e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
 800480c:	e005      	b.n	800481a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004826:	b004      	add	sp, #16
 8004828:	4770      	bx	lr
	...

0800482c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d165      	bne.n	800490c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a3e      	ldr	r2, [pc, #248]	; (800493c <USB_SetTurnaroundTime+0x110>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d906      	bls.n	8004856 <USB_SetTurnaroundTime+0x2a>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4a3d      	ldr	r2, [pc, #244]	; (8004940 <USB_SetTurnaroundTime+0x114>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d202      	bcs.n	8004856 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004850:	230f      	movs	r3, #15
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e05c      	b.n	8004910 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a39      	ldr	r2, [pc, #228]	; (8004940 <USB_SetTurnaroundTime+0x114>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d306      	bcc.n	800486c <USB_SetTurnaroundTime+0x40>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4a38      	ldr	r2, [pc, #224]	; (8004944 <USB_SetTurnaroundTime+0x118>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d202      	bcs.n	800486c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004866:	230e      	movs	r3, #14
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e051      	b.n	8004910 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a35      	ldr	r2, [pc, #212]	; (8004944 <USB_SetTurnaroundTime+0x118>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d306      	bcc.n	8004882 <USB_SetTurnaroundTime+0x56>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4a34      	ldr	r2, [pc, #208]	; (8004948 <USB_SetTurnaroundTime+0x11c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d202      	bcs.n	8004882 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800487c:	230d      	movs	r3, #13
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e046      	b.n	8004910 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4a30      	ldr	r2, [pc, #192]	; (8004948 <USB_SetTurnaroundTime+0x11c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d306      	bcc.n	8004898 <USB_SetTurnaroundTime+0x6c>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4a2f      	ldr	r2, [pc, #188]	; (800494c <USB_SetTurnaroundTime+0x120>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d802      	bhi.n	8004898 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004892:	230c      	movs	r3, #12
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e03b      	b.n	8004910 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4a2c      	ldr	r2, [pc, #176]	; (800494c <USB_SetTurnaroundTime+0x120>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d906      	bls.n	80048ae <USB_SetTurnaroundTime+0x82>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4a2b      	ldr	r2, [pc, #172]	; (8004950 <USB_SetTurnaroundTime+0x124>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d802      	bhi.n	80048ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048a8:	230b      	movs	r3, #11
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e030      	b.n	8004910 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4a27      	ldr	r2, [pc, #156]	; (8004950 <USB_SetTurnaroundTime+0x124>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d906      	bls.n	80048c4 <USB_SetTurnaroundTime+0x98>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <USB_SetTurnaroundTime+0x128>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d802      	bhi.n	80048c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048be:	230a      	movs	r3, #10
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e025      	b.n	8004910 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4a23      	ldr	r2, [pc, #140]	; (8004954 <USB_SetTurnaroundTime+0x128>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d906      	bls.n	80048da <USB_SetTurnaroundTime+0xae>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a22      	ldr	r2, [pc, #136]	; (8004958 <USB_SetTurnaroundTime+0x12c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d202      	bcs.n	80048da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048d4:	2309      	movs	r3, #9
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e01a      	b.n	8004910 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <USB_SetTurnaroundTime+0x12c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d306      	bcc.n	80048f0 <USB_SetTurnaroundTime+0xc4>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4a1d      	ldr	r2, [pc, #116]	; (800495c <USB_SetTurnaroundTime+0x130>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d802      	bhi.n	80048f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048ea:	2308      	movs	r3, #8
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e00f      	b.n	8004910 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4a1a      	ldr	r2, [pc, #104]	; (800495c <USB_SetTurnaroundTime+0x130>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d906      	bls.n	8004906 <USB_SetTurnaroundTime+0xda>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <USB_SetTurnaroundTime+0x134>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d202      	bcs.n	8004906 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004900:	2307      	movs	r3, #7
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e004      	b.n	8004910 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004906:	2306      	movs	r3, #6
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e001      	b.n	8004910 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800490c:	2309      	movs	r3, #9
 800490e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	029b      	lsls	r3, r3, #10
 8004924:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	00d8acbf 	.word	0x00d8acbf
 8004940:	00e4e1c0 	.word	0x00e4e1c0
 8004944:	00f42400 	.word	0x00f42400
 8004948:	01067380 	.word	0x01067380
 800494c:	011a499f 	.word	0x011a499f
 8004950:	01312cff 	.word	0x01312cff
 8004954:	014ca43f 	.word	0x014ca43f
 8004958:	016e3600 	.word	0x016e3600
 800495c:	01a6ab1f 	.word	0x01a6ab1f
 8004960:	01e84800 	.word	0x01e84800

08004964 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f043 0201 	orr.w	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f023 0201 	bic.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d115      	bne.n	80049f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049d6:	2001      	movs	r0, #1
 80049d8:	f7fc f804 	bl	80009e4 <HAL_Delay>
      ms++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f001 f8cf 	bl	8005b86 <USB_GetMode>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d01e      	beq.n	8004a2c <USB_SetCurrentMode+0x84>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b31      	cmp	r3, #49	; 0x31
 80049f2:	d9f0      	bls.n	80049d6 <USB_SetCurrentMode+0x2e>
 80049f4:	e01a      	b.n	8004a2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d115      	bne.n	8004a28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f7fb ffeb 	bl	80009e4 <HAL_Delay>
      ms++;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3301      	adds	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 f8b6 	bl	8005b86 <USB_GetMode>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <USB_SetCurrentMode+0x84>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b31      	cmp	r3, #49	; 0x31
 8004a24:	d9f0      	bls.n	8004a08 <USB_SetCurrentMode+0x60>
 8004a26:	e001      	b.n	8004a2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e005      	b.n	8004a38 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b32      	cmp	r3, #50	; 0x32
 8004a30:	d101      	bne.n	8004a36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a40:	b084      	sub	sp, #16
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	e009      	b.n	8004a74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	3340      	adds	r3, #64	; 0x40
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	3301      	adds	r3, #1
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b0e      	cmp	r3, #14
 8004a78:	d9f2      	bls.n	8004a60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d11c      	bne.n	8004aba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a8e:	f043 0302 	orr.w	r3, r3, #2
 8004a92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e005      	b.n	8004ac6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004acc:	461a      	mov	r2, r3
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad8:	4619      	mov	r1, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	680b      	ldr	r3, [r1, #0]
 8004ae4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ae6:	2103      	movs	r1, #3
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f955 	bl	8004d98 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004aee:	2110      	movs	r1, #16
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f8f1 	bl	8004cd8 <USB_FlushTxFifo>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f91b 	bl	8004d3c <USB_FlushRxFifo>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b16:	461a      	mov	r2, r3
 8004b18:	2300      	movs	r3, #0
 8004b1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	461a      	mov	r2, r3
 8004b24:	2300      	movs	r3, #0
 8004b26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	461a      	mov	r2, r3
 8004b30:	2300      	movs	r3, #0
 8004b32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	e043      	b.n	8004bc2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b50:	d118      	bne.n	8004b84 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	461a      	mov	r2, r3
 8004b66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	e013      	b.n	8004b96 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e008      	b.n	8004b96 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d3b7      	bcc.n	8004b3a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	e043      	b.n	8004c58 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be6:	d118      	bne.n	8004c1a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e013      	b.n	8004c2c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	461a      	mov	r2, r3
 8004c12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	e008      	b.n	8004c2c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c26:	461a      	mov	r2, r3
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	3301      	adds	r3, #1
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d3b7      	bcc.n	8004bd0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f043 0210 	orr.w	r2, r3, #16
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <USB_DevInit+0x294>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f043 0208 	orr.w	r2, r3, #8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d107      	bne.n	8004cc2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cba:	f043 0304 	orr.w	r3, r3, #4
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cce:	b004      	add	sp, #16
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	803c3800 	.word	0x803c3800

08004cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <USB_FlushTxFifo+0x60>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e01a      	b.n	8004d2c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	daf3      	bge.n	8004ce6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3301      	adds	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <USB_FlushTxFifo+0x60>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e006      	b.n	8004d2c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d0f1      	beq.n	8004d0e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	00030d40 	.word	0x00030d40

08004d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	4a11      	ldr	r2, [pc, #68]	; (8004d94 <USB_FlushRxFifo+0x58>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d901      	bls.n	8004d58 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e017      	b.n	8004d88 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	daf3      	bge.n	8004d48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2210      	movs	r2, #16
 8004d68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <USB_FlushRxFifo+0x58>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e006      	b.n	8004d88 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d0f1      	beq.n	8004d6a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	00030d40 	.word	0x00030d40

08004d98 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db8:	4313      	orrs	r3, r2
 8004dba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b087      	sub	sp, #28
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0306 	and.w	r3, r3, #6
 8004de2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d002      	beq.n	8004df0 <USB_GetDevSpeed+0x26>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b06      	cmp	r3, #6
 8004dee:	d102      	bne.n	8004df6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004df0:	2302      	movs	r3, #2
 8004df2:	75fb      	strb	r3, [r7, #23]
 8004df4:	e001      	b.n	8004dfa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004df6:	230f      	movs	r3, #15
 8004df8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d13a      	bne.n	8004e9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	2101      	movs	r1, #1
 8004e36:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	68f9      	ldr	r1, [r7, #12]
 8004e3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d155      	bne.n	8004f08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	78db      	ldrb	r3, [r3, #3]
 8004e76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	059b      	lsls	r3, r3, #22
 8004e7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e80:	4313      	orrs	r3, r2
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e036      	b.n	8004f08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea0:	69da      	ldr	r2, [r3, #28]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	2101      	movs	r1, #1
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	041b      	lsls	r3, r3, #16
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d11a      	bne.n	8004f08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	78db      	ldrb	r3, [r3, #3]
 8004eec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d161      	bne.n	8004ff8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f4a:	d11f      	bne.n	8004f8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fac:	4013      	ands	r3, r2
 8004fae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	68f9      	ldr	r1, [r7, #12]
 8004fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	0159      	lsls	r1, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	440b      	add	r3, r1
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4b35      	ldr	r3, [pc, #212]	; (80050c8 <USB_DeactivateEndpoint+0x1b0>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]
 8004ff6:	e060      	b.n	80050ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800500a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800500e:	d11f      	bne.n	8005050 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800502e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	440a      	add	r2, r1
 8005046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800504e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	2101      	movs	r1, #1
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	43db      	mvns	r3, r3
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005070:	4013      	ands	r3, r2
 8005072:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	2101      	movs	r1, #1
 8005086:	fa01 f303 	lsl.w	r3, r1, r3
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	43db      	mvns	r3, r3
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005094:	4013      	ands	r3, r2
 8005096:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	0159      	lsls	r1, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	440b      	add	r3, r1
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	4619      	mov	r1, r3
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <USB_DeactivateEndpoint+0x1b4>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	ec337800 	.word	0xec337800
 80050cc:	eff37800 	.word	0xeff37800

080050d0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	f040 810a 	bne.w	8005302 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d132      	bne.n	800515c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005110:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005114:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005118:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005138:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005154:	0cdb      	lsrs	r3, r3, #19
 8005156:	04db      	lsls	r3, r3, #19
 8005158:	6113      	str	r3, [r2, #16]
 800515a:	e074      	b.n	8005246 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005176:	0cdb      	lsrs	r3, r3, #19
 8005178:	04db      	lsls	r3, r3, #19
 800517a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005196:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800519a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800519e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6959      	ldr	r1, [r3, #20]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	440b      	add	r3, r1
 80051b8:	1e59      	subs	r1, r3, #1
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	fbb1 f3f3 	udiv	r3, r1, r3
 80051c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80051c4:	4baf      	ldr	r3, [pc, #700]	; (8005484 <USB_EPStartXfer+0x3b4>)
 80051c6:	400b      	ands	r3, r1
 80051c8:	6939      	ldr	r1, [r7, #16]
 80051ca:	0148      	lsls	r0, r1, #5
 80051cc:	6979      	ldr	r1, [r7, #20]
 80051ce:	4401      	add	r1, r0
 80051d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051d4:	4313      	orrs	r3, r2
 80051d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ee:	6939      	ldr	r1, [r7, #16]
 80051f0:	0148      	lsls	r0, r1, #5
 80051f2:	6979      	ldr	r1, [r7, #20]
 80051f4:	4401      	add	r1, r0
 80051f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051fa:	4313      	orrs	r3, r2
 80051fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	78db      	ldrb	r3, [r3, #3]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d11f      	bne.n	8005246 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	0151      	lsls	r1, r2, #5
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	440a      	add	r2, r1
 800521c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005220:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005224:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005240:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005244:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005260:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005264:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	78db      	ldrb	r3, [r3, #3]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d015      	beq.n	800529a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 8100 	beq.w	8005478 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	2101      	movs	r1, #1
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	6979      	ldr	r1, [r7, #20]
 8005290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005294:	4313      	orrs	r3, r2
 8005296:	634b      	str	r3, [r1, #52]	; 0x34
 8005298:	e0ee      	b.n	8005478 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d110      	bne.n	80052cc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e00f      	b.n	80052ec <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ea:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68d9      	ldr	r1, [r3, #12]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f9e2 	bl	80056c4 <USB_WritePacket>
 8005300:	e0ba      	b.n	8005478 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	440a      	add	r2, r1
 8005318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531c:	0cdb      	lsrs	r3, r3, #19
 800531e:	04db      	lsls	r3, r3, #19
 8005320:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005340:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005344:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d123      	bne.n	8005396 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005364:	6939      	ldr	r1, [r7, #16]
 8005366:	0148      	lsls	r0, r1, #5
 8005368:	6979      	ldr	r1, [r7, #20]
 800536a:	4401      	add	r1, r0
 800536c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005370:	4313      	orrs	r3, r2
 8005372:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005392:	6113      	str	r3, [r2, #16]
 8005394:	e033      	b.n	80053fe <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	4413      	add	r3, r2
 80053a0:	1e5a      	subs	r2, r3, #1
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	89fb      	ldrh	r3, [r7, #14]
 80053bc:	04d9      	lsls	r1, r3, #19
 80053be:	4b31      	ldr	r3, [pc, #196]	; (8005484 <USB_EPStartXfer+0x3b4>)
 80053c0:	400b      	ands	r3, r1
 80053c2:	6939      	ldr	r1, [r7, #16]
 80053c4:	0148      	lsls	r0, r1, #5
 80053c6:	6979      	ldr	r1, [r7, #20]
 80053c8:	4401      	add	r1, r0
 80053ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053ce:	4313      	orrs	r3, r2
 80053d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	89f9      	ldrh	r1, [r7, #14]
 80053e6:	fb01 f303 	mul.w	r3, r1, r3
 80053ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ee:	6939      	ldr	r1, [r7, #16]
 80053f0:	0148      	lsls	r0, r1, #5
 80053f2:	6979      	ldr	r1, [r7, #20]
 80053f4:	4401      	add	r1, r0
 80053f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053fa:	4313      	orrs	r3, r2
 80053fc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	78db      	ldrb	r3, [r3, #3]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d128      	bne.n	8005458 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d110      	bne.n	8005438 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005430:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e00f      	b.n	8005458 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005456:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	1ff80000 	.word	0x1ff80000

08005488 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	f040 80ab 	bne.w	80055fc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d132      	bne.n	8005514 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	0151      	lsls	r1, r2, #5
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	440a      	add	r2, r1
 8005508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550c:	0cdb      	lsrs	r3, r3, #19
 800550e:	04db      	lsls	r3, r3, #19
 8005510:	6113      	str	r3, [r2, #16]
 8005512:	e04e      	b.n	80055b2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	0cdb      	lsrs	r3, r3, #19
 8005530:	04db      	lsls	r3, r3, #19
 8005532:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005552:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005556:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	429a      	cmp	r2, r3
 8005562:	d903      	bls.n	800556c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	440a      	add	r2, r1
 8005582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005586:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800558a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	0148      	lsls	r0, r1, #5
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	4401      	add	r1, r0
 80055aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055ae:	4313      	orrs	r3, r2
 80055b0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055d0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d06d      	beq.n	80056b6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	2101      	movs	r1, #1
 80055ec:	fa01 f303 	lsl.w	r3, r1, r3
 80055f0:	68f9      	ldr	r1, [r7, #12]
 80055f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f6:	4313      	orrs	r3, r2
 80055f8:	634b      	str	r3, [r1, #52]	; 0x34
 80055fa:	e05c      	b.n	80056b6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005616:	0cdb      	lsrs	r3, r3, #19
 8005618:	04db      	lsls	r3, r3, #19
 800561a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	440a      	add	r2, r1
 8005632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005636:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800563a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800563e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800566e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	0148      	lsls	r0, r1, #5
 800568a:	68f9      	ldr	r1, [r7, #12]
 800568c:	4401      	add	r1, r0
 800568e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005692:	4313      	orrs	r3, r2
 8005694:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	4611      	mov	r1, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	460b      	mov	r3, r1
 80056d4:	71fb      	strb	r3, [r7, #7]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80056e2:	88bb      	ldrh	r3, [r7, #4]
 80056e4:	3303      	adds	r3, #3
 80056e6:	089b      	lsrs	r3, r3, #2
 80056e8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e018      	b.n	8005722 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	031a      	lsls	r2, r3, #12
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056fc:	461a      	mov	r2, r3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	3301      	adds	r3, #1
 8005708:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3301      	adds	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	3301      	adds	r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	3301      	adds	r3, #1
 800571a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	3301      	adds	r3, #1
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	d3e2      	bcc.n	80056f0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3724      	adds	r7, #36	; 0x24
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005738:	b480      	push	{r7}
 800573a:	b08b      	sub	sp, #44	; 0x2c
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	089b      	lsrs	r3, r3, #2
 8005752:	b29b      	uxth	r3, r3
 8005754:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800575e:	2300      	movs	r3, #0
 8005760:	623b      	str	r3, [r7, #32]
 8005762:	e014      	b.n	800578e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	3301      	adds	r3, #1
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	3301      	adds	r3, #1
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	3301      	adds	r3, #1
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	3301      	adds	r3, #1
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	3301      	adds	r3, #1
 800578c:	623b      	str	r3, [r7, #32]
 800578e:	6a3a      	ldr	r2, [r7, #32]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	429a      	cmp	r2, r3
 8005794:	d3e6      	bcc.n	8005764 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005796:	8bfb      	ldrh	r3, [r7, #30]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01e      	beq.n	80057da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a6:	461a      	mov	r2, r3
 80057a8:	f107 0310 	add.w	r3, r7, #16
 80057ac:	6812      	ldr	r2, [r2, #0]
 80057ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	701a      	strb	r2, [r3, #0]
      i++;
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	3301      	adds	r3, #1
 80057c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	3301      	adds	r3, #1
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057ce:	8bfb      	ldrh	r3, [r7, #30]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057d4:	8bfb      	ldrh	r3, [r7, #30]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1ea      	bne.n	80057b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057dc:	4618      	mov	r0, r3
 80057de:	372c      	adds	r7, #44	; 0x2c
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d12c      	bne.n	800585e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	db12      	blt.n	800583c <USB_EPSetStall+0x54>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00f      	beq.n	800583c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005836:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800583a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	e02b      	b.n	80058b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	db12      	blt.n	8005896 <USB_EPSetStall+0xae>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00f      	beq.n	8005896 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005890:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005894:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d128      	bne.n	8005932 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	78db      	ldrb	r3, [r3, #3]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d003      	beq.n	8005910 <USB_EPClearStall+0x4c>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	78db      	ldrb	r3, [r3, #3]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d138      	bne.n	8005982 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	e027      	b.n	8005982 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005950:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	78db      	ldrb	r3, [r3, #3]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d003      	beq.n	8005962 <USB_EPClearStall+0x9e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	78db      	ldrb	r3, [r3, #3]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d10f      	bne.n	8005982 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005980:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059c4:	68f9      	ldr	r1, [r7, #12]
 80059c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ca:	4313      	orrs	r3, r2
 80059cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059f6:	f023 0303 	bic.w	r3, r3, #3
 80059fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a0a:	f023 0302 	bic.w	r3, r3, #2
 8005a0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a38:	f023 0303 	bic.w	r3, r3, #3
 8005a3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a4c:	f043 0302 	orr.w	r3, r3, #2
 8005a50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4013      	ands	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a78:	68fb      	ldr	r3, [r7, #12]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	0c1b      	lsrs	r3, r3, #16
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	b29b      	uxth	r3, r3
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	460b      	mov	r3, r1
 8005af8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b087      	sub	sp, #28
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5a:	01db      	lsls	r3, r3, #7
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4013      	ands	r3, r2
 8005b76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b78:	68bb      	ldr	r3, [r7, #8]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f003 0301 	and.w	r3, r3, #1
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bc0:	f023 0307 	bic.w	r3, r3, #7
 8005bc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	333c      	adds	r3, #60	; 0x3c
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <USB_EP0_OutStart+0x8c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d90a      	bls.n	8005c1e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c18:	d101      	bne.n	8005c1e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e024      	b.n	8005c68 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	461a      	mov	r2, r3
 8005c26:	2300      	movs	r3, #0
 8005c28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4c:	f043 0318 	orr.w	r3, r3, #24
 8005c50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c64:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	4f54300a 	.word	0x4f54300a

08005c78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	4a13      	ldr	r2, [pc, #76]	; (8005cd8 <USB_CoreReset+0x60>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d901      	bls.n	8005c94 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e01a      	b.n	8005cca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	daf3      	bge.n	8005c84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f043 0201 	orr.w	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <USB_CoreReset+0x60>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e006      	b.n	8005cca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d0f1      	beq.n	8005cac <USB_CoreReset+0x34>

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	00030d40 	.word	0x00030d40

08005cdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ce8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005cec:	f002 fa6c 	bl	80081c8 <USBD_static_malloc>
 8005cf0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d00:	2302      	movs	r3, #2
 8005d02:	e066      	b.n	8005dd2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7c1b      	ldrb	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d119      	bne.n	8005d48 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d18:	2202      	movs	r2, #2
 8005d1a:	2181      	movs	r1, #129	; 0x81
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f002 f83f 	bl	8007da0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	2101      	movs	r1, #1
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f002 f835 	bl	8007da0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2210      	movs	r2, #16
 8005d42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005d46:	e016      	b.n	8005d76 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d48:	2340      	movs	r3, #64	; 0x40
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	2181      	movs	r1, #129	; 0x81
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f002 f826 	bl	8007da0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d5a:	2340      	movs	r3, #64	; 0x40
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	2101      	movs	r1, #1
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f002 f81d 	bl	8007da0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2210      	movs	r2, #16
 8005d72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d76:	2308      	movs	r3, #8
 8005d78:	2203      	movs	r2, #3
 8005d7a:	2182      	movs	r1, #130	; 0x82
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f002 f80f 	bl	8007da0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	7c1b      	ldrb	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d109      	bne.n	8005dc0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005db6:	2101      	movs	r1, #1
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f002 f96b 	bl	8008094 <USBD_LL_PrepareReceive>
 8005dbe:	e007      	b.n	8005dd0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dc6:	2340      	movs	r3, #64	; 0x40
 8005dc8:	2101      	movs	r1, #1
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f002 f962 	bl	8008094 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005de6:	2181      	movs	r1, #129	; 0x81
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f002 f817 	bl	8007e1c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005df4:	2101      	movs	r1, #1
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f002 f810 	bl	8007e1c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e04:	2182      	movs	r1, #130	; 0x82
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f002 f808 	bl	8007e1c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00e      	beq.n	8005e44 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e36:	4618      	mov	r0, r3
 8005e38:	f002 f9d4 	bl	80081e4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e0af      	b.n	8005fd8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d03f      	beq.n	8005f04 <USBD_CDC_Setup+0xb4>
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	f040 809f 	bne.w	8005fc8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	88db      	ldrh	r3, [r3, #6]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d02e      	beq.n	8005ef0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	b25b      	sxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da16      	bge.n	8005eca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005ea8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	88d2      	ldrh	r2, [r2, #6]
 8005eae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	88db      	ldrh	r3, [r3, #6]
 8005eb4:	2b07      	cmp	r3, #7
 8005eb6:	bf28      	it	cs
 8005eb8:	2307      	movcs	r3, #7
 8005eba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	89fa      	ldrh	r2, [r7, #14]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f001 fb13 	bl	80074ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005ec8:	e085      	b.n	8005fd6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	785a      	ldrb	r2, [r3, #1]
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	88db      	ldrh	r3, [r3, #6]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005ee0:	6939      	ldr	r1, [r7, #16]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	88db      	ldrh	r3, [r3, #6]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f001 fb2c 	bl	8007546 <USBD_CtlPrepareRx>
      break;
 8005eee:	e072      	b.n	8005fd6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	7850      	ldrb	r0, [r2, #1]
 8005efc:	2200      	movs	r2, #0
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	4798      	blx	r3
      break;
 8005f02:	e068      	b.n	8005fd6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b0b      	cmp	r3, #11
 8005f0a:	d852      	bhi.n	8005fb2 <USBD_CDC_Setup+0x162>
 8005f0c:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <USBD_CDC_Setup+0xc4>)
 8005f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f12:	bf00      	nop
 8005f14:	08005f45 	.word	0x08005f45
 8005f18:	08005fc1 	.word	0x08005fc1
 8005f1c:	08005fb3 	.word	0x08005fb3
 8005f20:	08005fb3 	.word	0x08005fb3
 8005f24:	08005fb3 	.word	0x08005fb3
 8005f28:	08005fb3 	.word	0x08005fb3
 8005f2c:	08005fb3 	.word	0x08005fb3
 8005f30:	08005fb3 	.word	0x08005fb3
 8005f34:	08005fb3 	.word	0x08005fb3
 8005f38:	08005fb3 	.word	0x08005fb3
 8005f3c:	08005f6f 	.word	0x08005f6f
 8005f40:	08005f99 	.word	0x08005f99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d107      	bne.n	8005f60 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f50:	f107 030a 	add.w	r3, r7, #10
 8005f54:	2202      	movs	r2, #2
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 fac8 	bl	80074ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f5e:	e032      	b.n	8005fc6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 fa52 	bl	800740c <USBD_CtlError>
            ret = USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f6c:	e02b      	b.n	8005fc6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d107      	bne.n	8005f8a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f7a:	f107 030d 	add.w	r3, r7, #13
 8005f7e:	2201      	movs	r2, #1
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 fab3 	bl	80074ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f88:	e01d      	b.n	8005fc6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 fa3d 	bl	800740c <USBD_CtlError>
            ret = USBD_FAIL;
 8005f92:	2303      	movs	r3, #3
 8005f94:	75fb      	strb	r3, [r7, #23]
          break;
 8005f96:	e016      	b.n	8005fc6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d00f      	beq.n	8005fc4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fa30 	bl	800740c <USBD_CtlError>
            ret = USBD_FAIL;
 8005fac:	2303      	movs	r3, #3
 8005fae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005fb0:	e008      	b.n	8005fc4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f001 fa29 	bl	800740c <USBD_CtlError>
          ret = USBD_FAIL;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005fbe:	e002      	b.n	8005fc6 <USBD_CDC_Setup+0x176>
          break;
 8005fc0:	bf00      	nop
 8005fc2:	e008      	b.n	8005fd6 <USBD_CDC_Setup+0x186>
          break;
 8005fc4:	bf00      	nop
      }
      break;
 8005fc6:	e006      	b.n	8005fd6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005fc8:	6839      	ldr	r1, [r7, #0]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 fa1e 	bl	800740c <USBD_CtlError>
      ret = USBD_FAIL;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ff2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e04f      	b.n	80060a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006008:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800600a:	78fa      	ldrb	r2, [r7, #3]
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	3318      	adds	r3, #24
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d029      	beq.n	8006074 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006020:	78fa      	ldrb	r2, [r7, #3]
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	3318      	adds	r3, #24
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	78f9      	ldrb	r1, [r7, #3]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	460b      	mov	r3, r1
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	1a5b      	subs	r3, r3, r1
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4403      	add	r3, r0
 8006040:	3344      	adds	r3, #68	; 0x44
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	fbb2 f1f3 	udiv	r1, r2, r3
 8006048:	fb03 f301 	mul.w	r3, r3, r1
 800604c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800604e:	2b00      	cmp	r3, #0
 8006050:	d110      	bne.n	8006074 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	4613      	mov	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	440b      	add	r3, r1
 8006060:	3318      	adds	r3, #24
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006066:	78f9      	ldrb	r1, [r7, #3]
 8006068:	2300      	movs	r3, #0
 800606a:	2200      	movs	r2, #0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 ffd9 	bl	8008024 <USBD_LL_Transmit>
 8006072:	e015      	b.n	80060a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2200      	movs	r2, #0
 8006078:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e015      	b.n	80060f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f002 f817 	bl	8008104 <USBD_LL_GetRxDataSize>
 80060d6:	4602      	mov	r2, r0
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80060f2:	4611      	mov	r1, r2
 80060f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800610e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006116:	2303      	movs	r3, #3
 8006118:	e01b      	b.n	8006152 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d015      	beq.n	8006150 <USBD_CDC_EP0_RxReady+0x50>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800612a:	2bff      	cmp	r3, #255	; 0xff
 800612c:	d010      	beq.n	8006150 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800613c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006144:	b292      	uxth	r2, r2
 8006146:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	22ff      	movs	r2, #255	; 0xff
 800614c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2243      	movs	r2, #67	; 0x43
 8006168:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800616a:	4b03      	ldr	r3, [pc, #12]	; (8006178 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	20000094 	.word	0x20000094

0800617c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2243      	movs	r2, #67	; 0x43
 8006188:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800618a:	4b03      	ldr	r3, [pc, #12]	; (8006198 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20000050 	.word	0x20000050

0800619c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2243      	movs	r2, #67	; 0x43
 80061a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80061aa:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	200000d8 	.word	0x200000d8

080061bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	220a      	movs	r2, #10
 80061c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80061ca:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	2000000c 	.word	0x2000000c

080061dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e004      	b.n	80061fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006206:	b480      	push	{r7}
 8006208:	b087      	sub	sp, #28
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006218:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006220:	2303      	movs	r3, #3
 8006222:	e008      	b.n	8006236 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006242:	b480      	push	{r7}
 8006244:	b085      	sub	sp, #20
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006252:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800625a:	2303      	movs	r3, #3
 800625c:	e004      	b.n	8006268 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006282:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800628e:	2303      	movs	r3, #3
 8006290:	e016      	b.n	80062c0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7c1b      	ldrb	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a4:	2101      	movs	r1, #1
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fef4 	bl	8008094 <USBD_LL_PrepareReceive>
 80062ac:	e007      	b.n	80062be <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062b4:	2340      	movs	r3, #64	; 0x40
 80062b6:	2101      	movs	r1, #1
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f001 feeb 	bl	8008094 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062dc:	2303      	movs	r3, #3
 80062de:	e01f      	b.n	8006320 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	79fa      	ldrb	r2, [r7, #7]
 8006312:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f001 fcc5 	bl	8007ca4 <USBD_LL_Init>
 800631a:	4603      	mov	r3, r0
 800631c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800631e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800633c:	2303      	movs	r3, #3
 800633e:	e016      	b.n	800636e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	f107 020e 	add.w	r2, r7, #14
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
 8006364:	4602      	mov	r2, r0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 fcdc 	bl	8007d3c <USBD_LL_Start>
 8006384:	4603      	mov	r3, r0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80063b0:	2303      	movs	r3, #3
 80063b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	4611      	mov	r1, r2
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	78fa      	ldrb	r2, [r7, #3]
 80063fc:	4611      	mov	r1, r2
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
  }

  return USBD_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 ffba 	bl	8007398 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006432:	461a      	mov	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	2b02      	cmp	r3, #2
 8006446:	d01a      	beq.n	800647e <USBD_LL_SetupStage+0x72>
 8006448:	2b02      	cmp	r3, #2
 800644a:	d822      	bhi.n	8006492 <USBD_LL_SetupStage+0x86>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <USBD_LL_SetupStage+0x4a>
 8006450:	2b01      	cmp	r3, #1
 8006452:	d00a      	beq.n	800646a <USBD_LL_SetupStage+0x5e>
 8006454:	e01d      	b.n	8006492 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fa62 	bl	8006928 <USBD_StdDevReq>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]
      break;
 8006468:	e020      	b.n	80064ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fac6 	bl	8006a04 <USBD_StdItfReq>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
      break;
 800647c:	e016      	b.n	80064ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fb05 	bl	8006a96 <USBD_StdEPReq>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
      break;
 8006490:	e00c      	b.n	80064ac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006498:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800649c:	b2db      	uxtb	r3, r3
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 fcf1 	bl	8007e88 <USBD_LL_StallEP>
 80064a6:	4603      	mov	r3, r0
 80064a8:	73fb      	strb	r3, [r7, #15]
      break;
 80064aa:	bf00      	nop
  }

  return ret;
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b086      	sub	sp, #24
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	460b      	mov	r3, r1
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064c4:	7afb      	ldrb	r3, [r7, #11]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d138      	bne.n	800653c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d14a      	bne.n	8006572 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d913      	bls.n	8006510 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	4293      	cmp	r3, r2
 8006500:	bf28      	it	cs
 8006502:	4613      	movcs	r3, r2
 8006504:	461a      	mov	r2, r3
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f001 f839 	bl	8007580 <USBD_CtlContinueRx>
 800650e:	e030      	b.n	8006572 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b03      	cmp	r3, #3
 800651a:	d10b      	bne.n	8006534 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f001 f834 	bl	80075a2 <USBD_CtlSendStatus>
 800653a:	e01a      	b.n	8006572 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b03      	cmp	r3, #3
 8006546:	d114      	bne.n	8006572 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00e      	beq.n	8006572 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	7afa      	ldrb	r2, [r7, #11]
 800655e:	4611      	mov	r1, r2
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	4798      	blx	r3
 8006564:	4603      	mov	r3, r0
 8006566:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800656e:	7dfb      	ldrb	r3, [r7, #23]
 8006570:	e000      	b.n	8006574 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	460b      	mov	r3, r1
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800658a:	7afb      	ldrb	r3, [r7, #11]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d16b      	bne.n	8006668 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3314      	adds	r3, #20
 8006594:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800659c:	2b02      	cmp	r3, #2
 800659e:	d156      	bne.n	800664e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d914      	bls.n	80065d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	1ad2      	subs	r2, r2, r3
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	461a      	mov	r2, r3
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 ffae 	bl	8007524 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065c8:	2300      	movs	r3, #0
 80065ca:	2200      	movs	r2, #0
 80065cc:	2100      	movs	r1, #0
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f001 fd60 	bl	8008094 <USBD_LL_PrepareReceive>
 80065d4:	e03b      	b.n	800664e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d11c      	bne.n	800661c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d316      	bcc.n	800661c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d20f      	bcs.n	800661c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065fc:	2200      	movs	r2, #0
 80065fe:	2100      	movs	r1, #0
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 ff8f 	bl	8007524 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800660e:	2300      	movs	r3, #0
 8006610:	2200      	movs	r2, #0
 8006612:	2100      	movs	r1, #0
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f001 fd3d 	bl	8008094 <USBD_LL_PrepareReceive>
 800661a:	e018      	b.n	800664e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b03      	cmp	r3, #3
 8006626:	d10b      	bne.n	8006640 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006640:	2180      	movs	r1, #128	; 0x80
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f001 fc20 	bl	8007e88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 ffbd 	bl	80075c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d122      	bne.n	800669e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fe98 	bl	800638e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006666:	e01a      	b.n	800669e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b03      	cmp	r3, #3
 8006672:	d114      	bne.n	800669e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00e      	beq.n	800669e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	7afa      	ldrb	r2, [r7, #11]
 800668a:	4611      	mov	r1, r2
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	4798      	blx	r3
 8006690:	4603      	mov	r3, r0
 8006692:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800669a:	7dfb      	ldrb	r3, [r7, #23]
 800669c:	e000      	b.n	80066a0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80066d8:	2303      	movs	r3, #3
 80066da:	e02f      	b.n	800673c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00f      	beq.n	8006706 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6852      	ldr	r2, [r2, #4]
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	4611      	mov	r1, r2
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006706:	2340      	movs	r3, #64	; 0x40
 8006708:	2200      	movs	r2, #0
 800670a:	2100      	movs	r1, #0
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 fb47 	bl	8007da0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2240      	movs	r2, #64	; 0x40
 800671e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006722:	2340      	movs	r3, #64	; 0x40
 8006724:	2200      	movs	r2, #0
 8006726:	2180      	movs	r1, #128	; 0x80
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fb39 	bl	8007da0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2240      	movs	r2, #64	; 0x40
 8006738:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	78fa      	ldrb	r2, [r7, #3]
 8006754:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006772:	b2da      	uxtb	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2204      	movs	r2, #4
 800677e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d106      	bne.n	80067b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e012      	b.n	80067fc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d10b      	bne.n	80067fa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800681a:	2303      	movs	r3, #3
 800681c:	e014      	b.n	8006848 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b03      	cmp	r3, #3
 8006828:	d10d      	bne.n	8006846 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	4611      	mov	r1, r2
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006866:	2303      	movs	r3, #3
 8006868:	e014      	b.n	8006894 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b03      	cmp	r3, #3
 8006874:	d10d      	bne.n	8006892 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	78fa      	ldrb	r2, [r7, #3]
 800688c:	4611      	mov	r1, r2
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d009      	beq.n	80068e0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6852      	ldr	r2, [r2, #4]
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	4611      	mov	r1, r2
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	4798      	blx	r3
  }

  return USBD_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b087      	sub	sp, #28
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	3301      	adds	r3, #1
 8006900:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006908:	8a3b      	ldrh	r3, [r7, #16]
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	b21a      	sxth	r2, r3
 800690e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006912:	4313      	orrs	r3, r2
 8006914:	b21b      	sxth	r3, r3
 8006916:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006918:	89fb      	ldrh	r3, [r7, #14]
}
 800691a:	4618      	mov	r0, r3
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d005      	beq.n	800694e <USBD_StdDevReq+0x26>
 8006942:	2b40      	cmp	r3, #64	; 0x40
 8006944:	d853      	bhi.n	80069ee <USBD_StdDevReq+0xc6>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00b      	beq.n	8006962 <USBD_StdDevReq+0x3a>
 800694a:	2b20      	cmp	r3, #32
 800694c:	d14f      	bne.n	80069ee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
      break;
 8006960:	e04a      	b.n	80069f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	2b09      	cmp	r3, #9
 8006968:	d83b      	bhi.n	80069e2 <USBD_StdDevReq+0xba>
 800696a:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <USBD_StdDevReq+0x48>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	080069c5 	.word	0x080069c5
 8006974:	080069d9 	.word	0x080069d9
 8006978:	080069e3 	.word	0x080069e3
 800697c:	080069cf 	.word	0x080069cf
 8006980:	080069e3 	.word	0x080069e3
 8006984:	080069a3 	.word	0x080069a3
 8006988:	08006999 	.word	0x08006999
 800698c:	080069e3 	.word	0x080069e3
 8006990:	080069bb 	.word	0x080069bb
 8006994:	080069ad 	.word	0x080069ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f9de 	bl	8006d5c <USBD_GetDescriptor>
          break;
 80069a0:	e024      	b.n	80069ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fb6d 	bl	8007084 <USBD_SetAddress>
          break;
 80069aa:	e01f      	b.n	80069ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fbac 	bl	800710c <USBD_SetConfig>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
          break;
 80069b8:	e018      	b.n	80069ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fc4b 	bl	8007258 <USBD_GetConfig>
          break;
 80069c2:	e013      	b.n	80069ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fc7c 	bl	80072c4 <USBD_GetStatus>
          break;
 80069cc:	e00e      	b.n	80069ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fcab 	bl	800732c <USBD_SetFeature>
          break;
 80069d6:	e009      	b.n	80069ec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fcba 	bl	8007354 <USBD_ClrFeature>
          break;
 80069e0:	e004      	b.n	80069ec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fd11 	bl	800740c <USBD_CtlError>
          break;
 80069ea:	bf00      	nop
      }
      break;
 80069ec:	e004      	b.n	80069f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fd0b 	bl	800740c <USBD_CtlError>
      break;
 80069f6:	bf00      	nop
  }

  return ret;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop

08006a04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a1a:	2b40      	cmp	r3, #64	; 0x40
 8006a1c:	d005      	beq.n	8006a2a <USBD_StdItfReq+0x26>
 8006a1e:	2b40      	cmp	r3, #64	; 0x40
 8006a20:	d82f      	bhi.n	8006a82 <USBD_StdItfReq+0x7e>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <USBD_StdItfReq+0x26>
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d12b      	bne.n	8006a82 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d81d      	bhi.n	8006a74 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	889b      	ldrh	r3, [r3, #4]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d813      	bhi.n	8006a6a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	4798      	blx	r3
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	88db      	ldrh	r3, [r3, #6]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d110      	bne.n	8006a7e <USBD_StdItfReq+0x7a>
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10d      	bne.n	8006a7e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fd9d 	bl	80075a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a68:	e009      	b.n	8006a7e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fccd 	bl	800740c <USBD_CtlError>
          break;
 8006a72:	e004      	b.n	8006a7e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fcc8 	bl	800740c <USBD_CtlError>
          break;
 8006a7c:	e000      	b.n	8006a80 <USBD_StdItfReq+0x7c>
          break;
 8006a7e:	bf00      	nop
      }
      break;
 8006a80:	e004      	b.n	8006a8c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fcc1 	bl	800740c <USBD_CtlError>
      break;
 8006a8a:	bf00      	nop
  }

  return ret;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	889b      	ldrh	r3, [r3, #4]
 8006aa8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ab2:	2b40      	cmp	r3, #64	; 0x40
 8006ab4:	d007      	beq.n	8006ac6 <USBD_StdEPReq+0x30>
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	f200 8145 	bhi.w	8006d46 <USBD_StdEPReq+0x2b0>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00c      	beq.n	8006ada <USBD_StdEPReq+0x44>
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	f040 8140 	bne.w	8006d46 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	4798      	blx	r3
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad8:	e13a      	b.n	8006d50 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d007      	beq.n	8006af2 <USBD_StdEPReq+0x5c>
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	f300 8129 	bgt.w	8006d3a <USBD_StdEPReq+0x2a4>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d07f      	beq.n	8006bec <USBD_StdEPReq+0x156>
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d03c      	beq.n	8006b6a <USBD_StdEPReq+0xd4>
 8006af0:	e123      	b.n	8006d3a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d002      	beq.n	8006b04 <USBD_StdEPReq+0x6e>
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d016      	beq.n	8006b30 <USBD_StdEPReq+0x9a>
 8006b02:	e02c      	b.n	8006b5e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00d      	beq.n	8006b26 <USBD_StdEPReq+0x90>
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d00a      	beq.n	8006b26 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 f9b7 	bl	8007e88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b1a:	2180      	movs	r1, #128	; 0x80
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 f9b3 	bl	8007e88 <USBD_LL_StallEP>
 8006b22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b24:	e020      	b.n	8006b68 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fc6f 	bl	800740c <USBD_CtlError>
              break;
 8006b2e:	e01b      	b.n	8006b68 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	885b      	ldrh	r3, [r3, #2]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10e      	bne.n	8006b56 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00b      	beq.n	8006b56 <USBD_StdEPReq+0xc0>
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b80      	cmp	r3, #128	; 0x80
 8006b42:	d008      	beq.n	8006b56 <USBD_StdEPReq+0xc0>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	88db      	ldrh	r3, [r3, #6]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 f999 	bl	8007e88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fd23 	bl	80075a2 <USBD_CtlSendStatus>

              break;
 8006b5c:	e004      	b.n	8006b68 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fc53 	bl	800740c <USBD_CtlError>
              break;
 8006b66:	bf00      	nop
          }
          break;
 8006b68:	e0ec      	b.n	8006d44 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d002      	beq.n	8006b7c <USBD_StdEPReq+0xe6>
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d016      	beq.n	8006ba8 <USBD_StdEPReq+0x112>
 8006b7a:	e030      	b.n	8006bde <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00d      	beq.n	8006b9e <USBD_StdEPReq+0x108>
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b80      	cmp	r3, #128	; 0x80
 8006b86:	d00a      	beq.n	8006b9e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f97b 	bl	8007e88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b92:	2180      	movs	r1, #128	; 0x80
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 f977 	bl	8007e88 <USBD_LL_StallEP>
 8006b9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b9c:	e025      	b.n	8006bea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fc33 	bl	800740c <USBD_CtlError>
              break;
 8006ba6:	e020      	b.n	8006bea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	885b      	ldrh	r3, [r3, #2]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11b      	bne.n	8006be8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d004      	beq.n	8006bc4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 f998 	bl	8007ef4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fcec 	bl	80075a2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006bdc:	e004      	b.n	8006be8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fc13 	bl	800740c <USBD_CtlError>
              break;
 8006be6:	e000      	b.n	8006bea <USBD_StdEPReq+0x154>
              break;
 8006be8:	bf00      	nop
          }
          break;
 8006bea:	e0ab      	b.n	8006d44 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d002      	beq.n	8006bfe <USBD_StdEPReq+0x168>
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d032      	beq.n	8006c62 <USBD_StdEPReq+0x1cc>
 8006bfc:	e097      	b.n	8006d2e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <USBD_StdEPReq+0x17e>
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2b80      	cmp	r3, #128	; 0x80
 8006c08:	d004      	beq.n	8006c14 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fbfd 	bl	800740c <USBD_CtlError>
                break;
 8006c12:	e091      	b.n	8006d38 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	da0b      	bge.n	8006c34 <USBD_StdEPReq+0x19e>
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	3310      	adds	r3, #16
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4413      	add	r3, r2
 8006c30:	3304      	adds	r3, #4
 8006c32:	e00b      	b.n	8006c4c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2202      	movs	r2, #2
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fc47 	bl	80074ee <USBD_CtlSendData>
              break;
 8006c60:	e06a      	b.n	8006d38 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	da11      	bge.n	8006c8e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	f003 020f 	and.w	r2, r3, #15
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	3324      	adds	r3, #36	; 0x24
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d117      	bne.n	8006cb4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fbc0 	bl	800740c <USBD_CtlError>
                  break;
 8006c8c:	e054      	b.n	8006d38 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	f003 020f 	and.w	r2, r3, #15
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d104      	bne.n	8006cb4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fbad 	bl	800740c <USBD_CtlError>
                  break;
 8006cb2:	e041      	b.n	8006d38 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	da0b      	bge.n	8006cd4 <USBD_StdEPReq+0x23e>
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	3310      	adds	r3, #16
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	4413      	add	r3, r2
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	e00b      	b.n	8006cec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4413      	add	r3, r2
 8006cea:	3304      	adds	r3, #4
 8006cec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <USBD_StdEPReq+0x264>
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	2b80      	cmp	r3, #128	; 0x80
 8006cf8:	d103      	bne.n	8006d02 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	e00e      	b.n	8006d20 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 f92a 	bl	8007f60 <USBD_LL_IsStallEP>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2201      	movs	r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	e002      	b.n	8006d20 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2202      	movs	r2, #2
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fbe1 	bl	80074ee <USBD_CtlSendData>
              break;
 8006d2c:	e004      	b.n	8006d38 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fb6b 	bl	800740c <USBD_CtlError>
              break;
 8006d36:	bf00      	nop
          }
          break;
 8006d38:	e004      	b.n	8006d44 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fb65 	bl	800740c <USBD_CtlError>
          break;
 8006d42:	bf00      	nop
      }
      break;
 8006d44:	e004      	b.n	8006d50 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fb5f 	bl	800740c <USBD_CtlError>
      break;
 8006d4e:	bf00      	nop
  }

  return ret;
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	885b      	ldrh	r3, [r3, #2]
 8006d76:	0a1b      	lsrs	r3, r3, #8
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	2b0e      	cmp	r3, #14
 8006d7e:	f200 8152 	bhi.w	8007026 <USBD_GetDescriptor+0x2ca>
 8006d82:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <USBD_GetDescriptor+0x2c>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006df9 	.word	0x08006df9
 8006d8c:	08006e11 	.word	0x08006e11
 8006d90:	08006e51 	.word	0x08006e51
 8006d94:	08007027 	.word	0x08007027
 8006d98:	08007027 	.word	0x08007027
 8006d9c:	08006fc7 	.word	0x08006fc7
 8006da0:	08006ff3 	.word	0x08006ff3
 8006da4:	08007027 	.word	0x08007027
 8006da8:	08007027 	.word	0x08007027
 8006dac:	08007027 	.word	0x08007027
 8006db0:	08007027 	.word	0x08007027
 8006db4:	08007027 	.word	0x08007027
 8006db8:	08007027 	.word	0x08007027
 8006dbc:	08007027 	.word	0x08007027
 8006dc0:	08006dc5 	.word	0x08006dc5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	7c12      	ldrb	r2, [r2, #16]
 8006ddc:	f107 0108 	add.w	r1, r7, #8
 8006de0:	4610      	mov	r0, r2
 8006de2:	4798      	blx	r3
 8006de4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006de6:	e126      	b.n	8007036 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fb0e 	bl	800740c <USBD_CtlError>
        err++;
 8006df0:	7afb      	ldrb	r3, [r7, #11]
 8006df2:	3301      	adds	r3, #1
 8006df4:	72fb      	strb	r3, [r7, #11]
      break;
 8006df6:	e11e      	b.n	8007036 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	7c12      	ldrb	r2, [r2, #16]
 8006e04:	f107 0108 	add.w	r1, r7, #8
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
 8006e0c:	60f8      	str	r0, [r7, #12]
      break;
 8006e0e:	e112      	b.n	8007036 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7c1b      	ldrb	r3, [r3, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10d      	bne.n	8006e34 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	f107 0208 	add.w	r2, r7, #8
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	2202      	movs	r2, #2
 8006e30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e32:	e100      	b.n	8007036 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	f107 0208 	add.w	r2, r7, #8
 8006e40:	4610      	mov	r0, r2
 8006e42:	4798      	blx	r3
 8006e44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	701a      	strb	r2, [r3, #0]
      break;
 8006e4e:	e0f2      	b.n	8007036 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	885b      	ldrh	r3, [r3, #2]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	f200 80ac 	bhi.w	8006fb4 <USBD_GetDescriptor+0x258>
 8006e5c:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <USBD_GetDescriptor+0x108>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e7d 	.word	0x08006e7d
 8006e68:	08006eb1 	.word	0x08006eb1
 8006e6c:	08006ee5 	.word	0x08006ee5
 8006e70:	08006f19 	.word	0x08006f19
 8006e74:	08006f4d 	.word	0x08006f4d
 8006e78:	08006f81 	.word	0x08006f81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	7c12      	ldrb	r2, [r2, #16]
 8006e94:	f107 0108 	add.w	r1, r7, #8
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
 8006e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e9e:	e091      	b.n	8006fc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fab2 	bl	800740c <USBD_CtlError>
            err++;
 8006ea8:	7afb      	ldrb	r3, [r7, #11]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	72fb      	strb	r3, [r7, #11]
          break;
 8006eae:	e089      	b.n	8006fc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	7c12      	ldrb	r2, [r2, #16]
 8006ec8:	f107 0108 	add.w	r1, r7, #8
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4798      	blx	r3
 8006ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ed2:	e077      	b.n	8006fc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fa98 	bl	800740c <USBD_CtlError>
            err++;
 8006edc:	7afb      	ldrb	r3, [r7, #11]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ee2:	e06f      	b.n	8006fc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	7c12      	ldrb	r2, [r2, #16]
 8006efc:	f107 0108 	add.w	r1, r7, #8
 8006f00:	4610      	mov	r0, r2
 8006f02:	4798      	blx	r3
 8006f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f06:	e05d      	b.n	8006fc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa7e 	bl	800740c <USBD_CtlError>
            err++;
 8006f10:	7afb      	ldrb	r3, [r7, #11]
 8006f12:	3301      	adds	r3, #1
 8006f14:	72fb      	strb	r3, [r7, #11]
          break;
 8006f16:	e055      	b.n	8006fc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	7c12      	ldrb	r2, [r2, #16]
 8006f30:	f107 0108 	add.w	r1, r7, #8
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
 8006f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f3a:	e043      	b.n	8006fc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa64 	bl	800740c <USBD_CtlError>
            err++;
 8006f44:	7afb      	ldrb	r3, [r7, #11]
 8006f46:	3301      	adds	r3, #1
 8006f48:	72fb      	strb	r3, [r7, #11]
          break;
 8006f4a:	e03b      	b.n	8006fc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	7c12      	ldrb	r2, [r2, #16]
 8006f64:	f107 0108 	add.w	r1, r7, #8
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4798      	blx	r3
 8006f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f6e:	e029      	b.n	8006fc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa4a 	bl	800740c <USBD_CtlError>
            err++;
 8006f78:	7afb      	ldrb	r3, [r7, #11]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f7e:	e021      	b.n	8006fc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	7c12      	ldrb	r2, [r2, #16]
 8006f98:	f107 0108 	add.w	r1, r7, #8
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
 8006fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fa2:	e00f      	b.n	8006fc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa30 	bl	800740c <USBD_CtlError>
            err++;
 8006fac:	7afb      	ldrb	r3, [r7, #11]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fb2:	e007      	b.n	8006fc4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa28 	bl	800740c <USBD_CtlError>
          err++;
 8006fbc:	7afb      	ldrb	r3, [r7, #11]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006fc2:	bf00      	nop
      }
      break;
 8006fc4:	e037      	b.n	8007036 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7c1b      	ldrb	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd6:	f107 0208 	add.w	r2, r7, #8
 8006fda:	4610      	mov	r0, r2
 8006fdc:	4798      	blx	r3
 8006fde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fe0:	e029      	b.n	8007036 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fa11 	bl	800740c <USBD_CtlError>
        err++;
 8006fea:	7afb      	ldrb	r3, [r7, #11]
 8006fec:	3301      	adds	r3, #1
 8006fee:	72fb      	strb	r3, [r7, #11]
      break;
 8006ff0:	e021      	b.n	8007036 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7c1b      	ldrb	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10d      	bne.n	8007016 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	f107 0208 	add.w	r2, r7, #8
 8007006:	4610      	mov	r0, r2
 8007008:	4798      	blx	r3
 800700a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3301      	adds	r3, #1
 8007010:	2207      	movs	r2, #7
 8007012:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007014:	e00f      	b.n	8007036 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f9f7 	bl	800740c <USBD_CtlError>
        err++;
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	3301      	adds	r3, #1
 8007022:	72fb      	strb	r3, [r7, #11]
      break;
 8007024:	e007      	b.n	8007036 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f9ef 	bl	800740c <USBD_CtlError>
      err++;
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	3301      	adds	r3, #1
 8007032:	72fb      	strb	r3, [r7, #11]
      break;
 8007034:	bf00      	nop
  }

  if (err != 0U)
 8007036:	7afb      	ldrb	r3, [r7, #11]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d11e      	bne.n	800707a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	88db      	ldrh	r3, [r3, #6]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d016      	beq.n	8007072 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007044:	893b      	ldrh	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00e      	beq.n	8007068 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	88da      	ldrh	r2, [r3, #6]
 800704e:	893b      	ldrh	r3, [r7, #8]
 8007050:	4293      	cmp	r3, r2
 8007052:	bf28      	it	cs
 8007054:	4613      	movcs	r3, r2
 8007056:	b29b      	uxth	r3, r3
 8007058:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800705a:	893b      	ldrh	r3, [r7, #8]
 800705c:	461a      	mov	r2, r3
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fa44 	bl	80074ee <USBD_CtlSendData>
 8007066:	e009      	b.n	800707c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f9ce 	bl	800740c <USBD_CtlError>
 8007070:	e004      	b.n	800707c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fa95 	bl	80075a2 <USBD_CtlSendStatus>
 8007078:	e000      	b.n	800707c <USBD_GetDescriptor+0x320>
    return;
 800707a:	bf00      	nop
  }
}
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop

08007084 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	889b      	ldrh	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d131      	bne.n	80070fa <USBD_SetAddress+0x76>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	88db      	ldrh	r3, [r3, #6]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d12d      	bne.n	80070fa <USBD_SetAddress+0x76>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	885b      	ldrh	r3, [r3, #2]
 80070a2:	2b7f      	cmp	r3, #127	; 0x7f
 80070a4:	d829      	bhi.n	80070fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d104      	bne.n	80070c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f9a3 	bl	800740c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c6:	e01d      	b.n	8007104 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	7bfa      	ldrb	r2, [r7, #15]
 80070cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 ff6f 	bl	8007fb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa61 	bl	80075a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ee:	e009      	b.n	8007104 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f8:	e004      	b.n	8007104 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f985 	bl	800740c <USBD_CtlError>
  }
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	885b      	ldrh	r3, [r3, #2]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	4b4c      	ldr	r3, [pc, #304]	; (8007254 <USBD_SetConfig+0x148>)
 8007122:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007124:	4b4b      	ldr	r3, [pc, #300]	; (8007254 <USBD_SetConfig+0x148>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d905      	bls.n	8007138 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f96c 	bl	800740c <USBD_CtlError>
    return USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	e088      	b.n	800724a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d002      	beq.n	800714a <USBD_SetConfig+0x3e>
 8007144:	2b03      	cmp	r3, #3
 8007146:	d025      	beq.n	8007194 <USBD_SetConfig+0x88>
 8007148:	e071      	b.n	800722e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800714a:	4b42      	ldr	r3, [pc, #264]	; (8007254 <USBD_SetConfig+0x148>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01c      	beq.n	800718c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007152:	4b40      	ldr	r3, [pc, #256]	; (8007254 <USBD_SetConfig+0x148>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800715c:	4b3d      	ldr	r3, [pc, #244]	; (8007254 <USBD_SetConfig+0x148>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff f91e 	bl	80063a4 <USBD_SetClassConfig>
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f949 	bl	800740c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800717a:	e065      	b.n	8007248 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fa10 	bl	80075a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2203      	movs	r2, #3
 8007186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800718a:	e05d      	b.n	8007248 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fa08 	bl	80075a2 <USBD_CtlSendStatus>
      break;
 8007192:	e059      	b.n	8007248 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007194:	4b2f      	ldr	r3, [pc, #188]	; (8007254 <USBD_SetConfig+0x148>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d112      	bne.n	80071c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071a4:	4b2b      	ldr	r3, [pc, #172]	; (8007254 <USBD_SetConfig+0x148>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071ae:	4b29      	ldr	r3, [pc, #164]	; (8007254 <USBD_SetConfig+0x148>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff f911 	bl	80063dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f9f1 	bl	80075a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071c0:	e042      	b.n	8007248 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80071c2:	4b24      	ldr	r3, [pc, #144]	; (8007254 <USBD_SetConfig+0x148>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d02a      	beq.n	8007226 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff f8ff 	bl	80063dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80071de:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <USBD_SetConfig+0x148>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <USBD_SetConfig+0x148>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff f8d8 	bl	80063a4 <USBD_SetClassConfig>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00f      	beq.n	800721e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f903 	bl	800740c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff f8e4 	bl	80063dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800721c:	e014      	b.n	8007248 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f9bf 	bl	80075a2 <USBD_CtlSendStatus>
      break;
 8007224:	e010      	b.n	8007248 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f9bb 	bl	80075a2 <USBD_CtlSendStatus>
      break;
 800722c:	e00c      	b.n	8007248 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f8eb 	bl	800740c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007236:	4b07      	ldr	r3, [pc, #28]	; (8007254 <USBD_SetConfig+0x148>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff f8cd 	bl	80063dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007242:	2303      	movs	r3, #3
 8007244:	73fb      	strb	r3, [r7, #15]
      break;
 8007246:	bf00      	nop
  }

  return ret;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200001ac 	.word	0x200001ac

08007258 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88db      	ldrh	r3, [r3, #6]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d004      	beq.n	8007274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f8cd 	bl	800740c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007272:	e023      	b.n	80072bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	dc02      	bgt.n	8007286 <USBD_GetConfig+0x2e>
 8007280:	2b00      	cmp	r3, #0
 8007282:	dc03      	bgt.n	800728c <USBD_GetConfig+0x34>
 8007284:	e015      	b.n	80072b2 <USBD_GetConfig+0x5a>
 8007286:	2b03      	cmp	r3, #3
 8007288:	d00b      	beq.n	80072a2 <USBD_GetConfig+0x4a>
 800728a:	e012      	b.n	80072b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3308      	adds	r3, #8
 8007296:	2201      	movs	r2, #1
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f927 	bl	80074ee <USBD_CtlSendData>
        break;
 80072a0:	e00c      	b.n	80072bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	2201      	movs	r2, #1
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f91f 	bl	80074ee <USBD_CtlSendData>
        break;
 80072b0:	e004      	b.n	80072bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f8a9 	bl	800740c <USBD_CtlError>
        break;
 80072ba:	bf00      	nop
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d81e      	bhi.n	800731a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	88db      	ldrh	r3, [r3, #6]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d004      	beq.n	80072ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f890 	bl	800740c <USBD_CtlError>
        break;
 80072ec:	e01a      	b.n	8007324 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f043 0202 	orr.w	r2, r3, #2
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	330c      	adds	r3, #12
 800730e:	2202      	movs	r2, #2
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f8eb 	bl	80074ee <USBD_CtlSendData>
      break;
 8007318:	e004      	b.n	8007324 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f875 	bl	800740c <USBD_CtlError>
      break;
 8007322:	bf00      	nop
  }
}
 8007324:	bf00      	nop
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	885b      	ldrh	r3, [r3, #2]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d106      	bne.n	800734c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f92b 	bl	80075a2 <USBD_CtlSendStatus>
  }
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	b2db      	uxtb	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	2b02      	cmp	r3, #2
 800736a:	d80b      	bhi.n	8007384 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	885b      	ldrh	r3, [r3, #2]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d10c      	bne.n	800738e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f910 	bl	80075a2 <USBD_CtlSendStatus>
      }
      break;
 8007382:	e004      	b.n	800738e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f840 	bl	800740c <USBD_CtlError>
      break;
 800738c:	e000      	b.n	8007390 <USBD_ClrFeature+0x3c>
      break;
 800738e:	bf00      	nop
  }
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3301      	adds	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	781a      	ldrb	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3301      	adds	r3, #1
 80073c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f7ff fa91 	bl	80068ea <SWAPBYTE>
 80073c8:	4603      	mov	r3, r0
 80073ca:	461a      	mov	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f7ff fa84 	bl	80068ea <SWAPBYTE>
 80073e2:	4603      	mov	r3, r0
 80073e4:	461a      	mov	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f7ff fa77 	bl	80068ea <SWAPBYTE>
 80073fc:	4603      	mov	r3, r0
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	80da      	strh	r2, [r3, #6]
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007416:	2180      	movs	r1, #128	; 0x80
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fd35 	bl	8007e88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800741e:	2100      	movs	r1, #0
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fd31 	bl	8007e88 <USBD_LL_StallEP>
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b086      	sub	sp, #24
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d036      	beq.n	80074b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007448:	6938      	ldr	r0, [r7, #16]
 800744a:	f000 f836 	bl	80074ba <USBD_GetLen>
 800744e:	4603      	mov	r3, r0
 8007450:	3301      	adds	r3, #1
 8007452:	b29b      	uxth	r3, r3
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	4413      	add	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	7812      	ldrb	r2, [r2, #0]
 8007466:	701a      	strb	r2, [r3, #0]
  idx++;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	3301      	adds	r3, #1
 800746c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	4413      	add	r3, r2
 8007474:	2203      	movs	r2, #3
 8007476:	701a      	strb	r2, [r3, #0]
  idx++;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	3301      	adds	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800747e:	e013      	b.n	80074a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	4413      	add	r3, r2
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	7812      	ldrb	r2, [r2, #0]
 800748a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	3301      	adds	r3, #1
 8007490:	613b      	str	r3, [r7, #16]
    idx++;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	3301      	adds	r3, #1
 8007496:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	3301      	adds	r3, #1
 80074a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e7      	bne.n	8007480 <USBD_GetString+0x52>
 80074b0:	e000      	b.n	80074b4 <USBD_GetString+0x86>
    return;
 80074b2:	bf00      	nop
  }
}
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074ca:	e005      	b.n	80074d8 <USBD_GetLen+0x1e>
  {
    len++;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	3301      	adds	r3, #1
 80074d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	3301      	adds	r3, #1
 80074d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f5      	bne.n	80074cc <USBD_GetLen+0x12>
  }

  return len;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	2100      	movs	r1, #0
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 fd85 	bl	8008024 <USBD_LL_Transmit>

  return USBD_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	2100      	movs	r1, #0
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fd74 	bl	8008024 <USBD_LL_Transmit>

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2203      	movs	r2, #3
 8007556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	2100      	movs	r1, #0
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fd8f 	bl	8008094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	2100      	movs	r1, #0
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fd7e 	bl	8008094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2204      	movs	r2, #4
 80075ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075b2:	2300      	movs	r3, #0
 80075b4:	2200      	movs	r2, #0
 80075b6:	2100      	movs	r1, #0
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fd33 	bl	8008024 <USBD_LL_Transmit>

  return USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2205      	movs	r2, #5
 80075d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075d8:	2300      	movs	r3, #0
 80075da:	2200      	movs	r2, #0
 80075dc:	2100      	movs	r1, #0
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fd58 	bl	8008094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075f4:	2200      	movs	r2, #0
 80075f6:	4912      	ldr	r1, [pc, #72]	; (8007640 <MX_USB_DEVICE_Init+0x50>)
 80075f8:	4812      	ldr	r0, [pc, #72]	; (8007644 <MX_USB_DEVICE_Init+0x54>)
 80075fa:	f7fe fe65 	bl	80062c8 <USBD_Init>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007604:	f7f9 f85c 	bl	80006c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007608:	490f      	ldr	r1, [pc, #60]	; (8007648 <MX_USB_DEVICE_Init+0x58>)
 800760a:	480e      	ldr	r0, [pc, #56]	; (8007644 <MX_USB_DEVICE_Init+0x54>)
 800760c:	f7fe fe8c 	bl	8006328 <USBD_RegisterClass>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007616:	f7f9 f853 	bl	80006c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800761a:	490c      	ldr	r1, [pc, #48]	; (800764c <MX_USB_DEVICE_Init+0x5c>)
 800761c:	4809      	ldr	r0, [pc, #36]	; (8007644 <MX_USB_DEVICE_Init+0x54>)
 800761e:	f7fe fddd 	bl	80061dc <USBD_CDC_RegisterInterface>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007628:	f7f9 f84a 	bl	80006c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800762c:	4805      	ldr	r0, [pc, #20]	; (8007644 <MX_USB_DEVICE_Init+0x54>)
 800762e:	f7fe fea2 	bl	8006376 <USBD_Start>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007638:	f7f9 f842 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800763c:	bf00      	nop
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000130 	.word	0x20000130
 8007644:	2000049c 	.word	0x2000049c
 8007648:	20000018 	.word	0x20000018
 800764c:	2000011c 	.word	0x2000011c

08007650 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007654:	2200      	movs	r2, #0
 8007656:	4905      	ldr	r1, [pc, #20]	; (800766c <CDC_Init_FS+0x1c>)
 8007658:	4805      	ldr	r0, [pc, #20]	; (8007670 <CDC_Init_FS+0x20>)
 800765a:	f7fe fdd4 	bl	8006206 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800765e:	4905      	ldr	r1, [pc, #20]	; (8007674 <CDC_Init_FS+0x24>)
 8007660:	4803      	ldr	r0, [pc, #12]	; (8007670 <CDC_Init_FS+0x20>)
 8007662:	f7fe fdee 	bl	8006242 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007666:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007668:	4618      	mov	r0, r3
 800766a:	bd80      	pop	{r7, pc}
 800766c:	20000f6c 	.word	0x20000f6c
 8007670:	2000049c 	.word	0x2000049c
 8007674:	2000076c 	.word	0x2000076c

08007678 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800767c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800767e:	4618      	mov	r0, r3
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	6039      	str	r1, [r7, #0]
 8007692:	71fb      	strb	r3, [r7, #7]
 8007694:	4613      	mov	r3, r2
 8007696:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	2b23      	cmp	r3, #35	; 0x23
 800769c:	d84a      	bhi.n	8007734 <CDC_Control_FS+0xac>
 800769e:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <CDC_Control_FS+0x1c>)
 80076a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a4:	08007735 	.word	0x08007735
 80076a8:	08007735 	.word	0x08007735
 80076ac:	08007735 	.word	0x08007735
 80076b0:	08007735 	.word	0x08007735
 80076b4:	08007735 	.word	0x08007735
 80076b8:	08007735 	.word	0x08007735
 80076bc:	08007735 	.word	0x08007735
 80076c0:	08007735 	.word	0x08007735
 80076c4:	08007735 	.word	0x08007735
 80076c8:	08007735 	.word	0x08007735
 80076cc:	08007735 	.word	0x08007735
 80076d0:	08007735 	.word	0x08007735
 80076d4:	08007735 	.word	0x08007735
 80076d8:	08007735 	.word	0x08007735
 80076dc:	08007735 	.word	0x08007735
 80076e0:	08007735 	.word	0x08007735
 80076e4:	08007735 	.word	0x08007735
 80076e8:	08007735 	.word	0x08007735
 80076ec:	08007735 	.word	0x08007735
 80076f0:	08007735 	.word	0x08007735
 80076f4:	08007735 	.word	0x08007735
 80076f8:	08007735 	.word	0x08007735
 80076fc:	08007735 	.word	0x08007735
 8007700:	08007735 	.word	0x08007735
 8007704:	08007735 	.word	0x08007735
 8007708:	08007735 	.word	0x08007735
 800770c:	08007735 	.word	0x08007735
 8007710:	08007735 	.word	0x08007735
 8007714:	08007735 	.word	0x08007735
 8007718:	08007735 	.word	0x08007735
 800771c:	08007735 	.word	0x08007735
 8007720:	08007735 	.word	0x08007735
 8007724:	08007735 	.word	0x08007735
 8007728:	08007735 	.word	0x08007735
 800772c:	08007735 	.word	0x08007735
 8007730:	08007735 	.word	0x08007735
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007734:	bf00      	nop
  }

  return (USBD_OK);
 8007736:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4805      	ldr	r0, [pc, #20]	; (8007768 <CDC_Receive_FS+0x24>)
 8007752:	f7fe fd76 	bl	8006242 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007756:	4804      	ldr	r0, [pc, #16]	; (8007768 <CDC_Receive_FS+0x24>)
 8007758:	f7fe fd8c 	bl	8006274 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800775c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	2000049c 	.word	0x2000049c

0800776c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800777e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007782:	4618      	mov	r0, r3
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	6039      	str	r1, [r7, #0]
 800779a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2212      	movs	r2, #18
 80077a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077a2:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20000150 	.word	0x20000150

080077b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2204      	movs	r2, #4
 80077c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077c6:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	20000170 	.word	0x20000170

080077d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	4907      	ldr	r1, [pc, #28]	; (800780c <USBD_FS_ProductStrDescriptor+0x34>)
 80077ee:	4808      	ldr	r0, [pc, #32]	; (8007810 <USBD_FS_ProductStrDescriptor+0x38>)
 80077f0:	f7ff fe1d 	bl	800742e <USBD_GetString>
 80077f4:	e004      	b.n	8007800 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	4904      	ldr	r1, [pc, #16]	; (800780c <USBD_FS_ProductStrDescriptor+0x34>)
 80077fa:	4805      	ldr	r0, [pc, #20]	; (8007810 <USBD_FS_ProductStrDescriptor+0x38>)
 80077fc:	f7ff fe17 	bl	800742e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007800:	4b02      	ldr	r3, [pc, #8]	; (800780c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	2000176c 	.word	0x2000176c
 8007810:	08008274 	.word	0x08008274

08007814 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	6039      	str	r1, [r7, #0]
 800781e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	4904      	ldr	r1, [pc, #16]	; (8007834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007824:	4804      	ldr	r0, [pc, #16]	; (8007838 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007826:	f7ff fe02 	bl	800742e <USBD_GetString>
  return USBD_StrDesc;
 800782a:	4b02      	ldr	r3, [pc, #8]	; (8007834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	2000176c 	.word	0x2000176c
 8007838:	0800828c 	.word	0x0800828c

0800783c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	221a      	movs	r2, #26
 800784c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800784e:	f000 f855 	bl	80078fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007852:	4b02      	ldr	r3, [pc, #8]	; (800785c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000174 	.word	0x20000174

08007860 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	6039      	str	r1, [r7, #0]
 800786a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800786c:	79fb      	ldrb	r3, [r7, #7]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d105      	bne.n	800787e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	4907      	ldr	r1, [pc, #28]	; (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007876:	4808      	ldr	r0, [pc, #32]	; (8007898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007878:	f7ff fdd9 	bl	800742e <USBD_GetString>
 800787c:	e004      	b.n	8007888 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	4904      	ldr	r1, [pc, #16]	; (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007882:	4805      	ldr	r0, [pc, #20]	; (8007898 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007884:	f7ff fdd3 	bl	800742e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007888:	4b02      	ldr	r3, [pc, #8]	; (8007894 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	2000176c 	.word	0x2000176c
 8007898:	080082a0 	.word	0x080082a0

0800789c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d105      	bne.n	80078ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	4907      	ldr	r1, [pc, #28]	; (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078b2:	4808      	ldr	r0, [pc, #32]	; (80078d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078b4:	f7ff fdbb 	bl	800742e <USBD_GetString>
 80078b8:	e004      	b.n	80078c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	4904      	ldr	r1, [pc, #16]	; (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078be:	4805      	ldr	r0, [pc, #20]	; (80078d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078c0:	f7ff fdb5 	bl	800742e <USBD_GetString>
  }
  return USBD_StrDesc;
 80078c4:	4b02      	ldr	r3, [pc, #8]	; (80078d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	2000176c 	.word	0x2000176c
 80078d4:	080082ac 	.word	0x080082ac

080078d8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	6039      	str	r1, [r7, #0]
 80078e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	220c      	movs	r2, #12
 80078e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80078ea:	4b03      	ldr	r3, [pc, #12]	; (80078f8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	20000164 	.word	0x20000164

080078fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007902:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <Get_SerialNum+0x44>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007908:	4b0e      	ldr	r3, [pc, #56]	; (8007944 <Get_SerialNum+0x48>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800790e:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <Get_SerialNum+0x4c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4413      	add	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007922:	2208      	movs	r2, #8
 8007924:	4909      	ldr	r1, [pc, #36]	; (800794c <Get_SerialNum+0x50>)
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 f814 	bl	8007954 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800792c:	2204      	movs	r2, #4
 800792e:	4908      	ldr	r1, [pc, #32]	; (8007950 <Get_SerialNum+0x54>)
 8007930:	68b8      	ldr	r0, [r7, #8]
 8007932:	f000 f80f 	bl	8007954 <IntToUnicode>
  }
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	1fff7590 	.word	0x1fff7590
 8007944:	1fff7594 	.word	0x1fff7594
 8007948:	1fff7598 	.word	0x1fff7598
 800794c:	20000176 	.word	0x20000176
 8007950:	20000186 	.word	0x20000186

08007954 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
 800796a:	e027      	b.n	80079bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	0f1b      	lsrs	r3, r3, #28
 8007970:	2b09      	cmp	r3, #9
 8007972:	d80b      	bhi.n	800798c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	0f1b      	lsrs	r3, r3, #28
 8007978:	b2da      	uxtb	r2, r3
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	4619      	mov	r1, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	440b      	add	r3, r1
 8007984:	3230      	adds	r2, #48	; 0x30
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	e00a      	b.n	80079a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	0f1b      	lsrs	r3, r3, #28
 8007990:	b2da      	uxtb	r2, r3
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	4619      	mov	r1, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	440b      	add	r3, r1
 800799c:	3237      	adds	r2, #55	; 0x37
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	3301      	adds	r3, #1
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	4413      	add	r3, r2
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	3301      	adds	r3, #1
 80079ba:	75fb      	strb	r3, [r7, #23]
 80079bc:	7dfa      	ldrb	r2, [r7, #23]
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d3d3      	bcc.n	800796c <IntToUnicode+0x18>
  }
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079dc:	f107 0314 	add.w	r3, r7, #20
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	609a      	str	r2, [r3, #8]
 80079e8:	60da      	str	r2, [r3, #12]
 80079ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079f4:	d14e      	bne.n	8007a94 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079f6:	4b29      	ldr	r3, [pc, #164]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 80079f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fa:	4a28      	ldr	r2, [pc, #160]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 80079fc:	f043 0301 	orr.w	r3, r3, #1
 8007a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a02:	4b26      	ldr	r3, [pc, #152]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 8007a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8007a0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a14:	2302      	movs	r3, #2
 8007a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a20:	230a      	movs	r3, #10
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a24:	f107 0314 	add.w	r3, r7, #20
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a2e:	f7fa f8b7 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a32:	4b1a      	ldr	r3, [pc, #104]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 8007a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a36:	4a19      	ldr	r2, [pc, #100]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 8007a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a3e:	4b17      	ldr	r3, [pc, #92]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 8007a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a4a:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 8007a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d114      	bne.n	8007a80 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a56:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	4a10      	ldr	r2, [pc, #64]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 8007a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a60:	6593      	str	r3, [r2, #88]	; 0x58
 8007a62:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 8007a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a6a:	60bb      	str	r3, [r7, #8]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007a6e:	f7fb fb61 	bl	8003134 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a72:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 8007a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a76:	4a09      	ldr	r2, [pc, #36]	; (8007a9c <HAL_PCD_MspInit+0xc8>)
 8007a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8007a7e:	e001      	b.n	8007a84 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007a80:	f7fb fb58 	bl	8003134 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a84:	2200      	movs	r2, #0
 8007a86:	2100      	movs	r1, #0
 8007a88:	2043      	movs	r0, #67	; 0x43
 8007a8a:	f7fa f852 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a8e:	2043      	movs	r0, #67	; 0x43
 8007a90:	f7fa f86b 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a94:	bf00      	nop
 8007a96:	3728      	adds	r7, #40	; 0x28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40021000 	.word	0x40021000

08007aa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f7fe fca8 	bl	800640c <USBD_LL_SetupStage>
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	1a9b      	subs	r3, r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	4619      	mov	r1, r3
 8007aee:	f7fe fce2 	bl	80064b6 <USBD_LL_DataOutStage>
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	3348      	adds	r3, #72	; 0x48
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	4619      	mov	r1, r3
 8007b22:	f7fe fd2b 	bl	800657c <USBD_LL_DataInStage>
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fe3f 	bl	80067c0 <USBD_LL_SOF>
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b52:	2301      	movs	r3, #1
 8007b54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d001      	beq.n	8007b62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b5e:	f7f8 fdaf 	bl	80006c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b68:	7bfa      	ldrb	r2, [r7, #15]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe fde9 	bl	8006744 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe fd95 	bl	80066a8 <USBD_LL_Reset>
}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6812      	ldr	r2, [r2, #0]
 8007b9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe fdd8 	bl	8006764 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bbc:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <HAL_PCD_SuspendCallback+0x48>)
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	4a03      	ldr	r2, [pc, #12]	; (8007bd0 <HAL_PCD_SuspendCallback+0x48>)
 8007bc2:	f043 0306 	orr.w	r3, r3, #6
 8007bc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	e000ed00 	.word	0xe000ed00

08007bd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bee:	f023 0301 	bic.w	r3, r3, #1
 8007bf2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d007      	beq.n	8007c0c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bfc:	4b08      	ldr	r3, [pc, #32]	; (8007c20 <HAL_PCD_ResumeCallback+0x4c>)
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	4a07      	ldr	r2, [pc, #28]	; (8007c20 <HAL_PCD_ResumeCallback+0x4c>)
 8007c02:	f023 0306 	bic.w	r3, r3, #6
 8007c06:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007c08:	f000 faf6 	bl	80081f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fdbc 	bl	8006790 <USBD_LL_Resume>
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	e000ed00 	.word	0xe000ed00

08007c24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fe08 	bl	8006850 <USBD_LL_IsoOUTIncomplete>
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe fdd0 	bl	8006804 <USBD_LL_IsoINIncomplete>
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fe0e 	bl	800689c <USBD_LL_DevConnected>
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fe0b 	bl	80068b2 <USBD_LL_DevDisconnected>
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d13c      	bne.n	8007d2e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007cb4:	4a20      	ldr	r2, [pc, #128]	; (8007d38 <USBD_LL_Init+0x94>)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a1e      	ldr	r2, [pc, #120]	; (8007d38 <USBD_LL_Init+0x94>)
 8007cc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007cc4:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <USBD_LL_Init+0x94>)
 8007cc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007cca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007ccc:	4b1a      	ldr	r3, [pc, #104]	; (8007d38 <USBD_LL_Init+0x94>)
 8007cce:	2206      	movs	r2, #6
 8007cd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007cd2:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <USBD_LL_Init+0x94>)
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cd8:	4b17      	ldr	r3, [pc, #92]	; (8007d38 <USBD_LL_Init+0x94>)
 8007cda:	2202      	movs	r2, #2
 8007cdc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cde:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <USBD_LL_Init+0x94>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ce4:	4b14      	ldr	r3, [pc, #80]	; (8007d38 <USBD_LL_Init+0x94>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007cea:	4b13      	ldr	r3, [pc, #76]	; (8007d38 <USBD_LL_Init+0x94>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007cf0:	4b11      	ldr	r3, [pc, #68]	; (8007d38 <USBD_LL_Init+0x94>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007cf6:	4b10      	ldr	r3, [pc, #64]	; (8007d38 <USBD_LL_Init+0x94>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007cfc:	4b0e      	ldr	r3, [pc, #56]	; (8007d38 <USBD_LL_Init+0x94>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d02:	480d      	ldr	r0, [pc, #52]	; (8007d38 <USBD_LL_Init+0x94>)
 8007d04:	f7fa f90e 	bl	8001f24 <HAL_PCD_Init>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d0e:	f7f8 fcd7 	bl	80006c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d12:	2180      	movs	r1, #128	; 0x80
 8007d14:	4808      	ldr	r0, [pc, #32]	; (8007d38 <USBD_LL_Init+0x94>)
 8007d16:	f7fb f964 	bl	8002fe2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d1a:	2240      	movs	r2, #64	; 0x40
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4806      	ldr	r0, [pc, #24]	; (8007d38 <USBD_LL_Init+0x94>)
 8007d20:	f7fb f918 	bl	8002f54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d24:	2280      	movs	r2, #128	; 0x80
 8007d26:	2101      	movs	r1, #1
 8007d28:	4803      	ldr	r0, [pc, #12]	; (8007d38 <USBD_LL_Init+0x94>)
 8007d2a:	f7fb f913 	bl	8002f54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	2000196c 	.word	0x2000196c

08007d3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fa fa0a 	bl	800216c <HAL_PCD_Start>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d816      	bhi.n	8007d90 <USBD_LL_Start+0x54>
 8007d62:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <USBD_LL_Start+0x2c>)
 8007d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d68:	08007d79 	.word	0x08007d79
 8007d6c:	08007d7f 	.word	0x08007d7f
 8007d70:	08007d85 	.word	0x08007d85
 8007d74:	08007d8b 	.word	0x08007d8b
    case HAL_OK :
      usb_status = USBD_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d7c:	e00b      	b.n	8007d96 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	73fb      	strb	r3, [r7, #15]
    break;
 8007d82:	e008      	b.n	8007d96 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
    break;
 8007d88:	e005      	b.n	8007d96 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d8e:	e002      	b.n	8007d96 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007d90:	2303      	movs	r3, #3
 8007d92:	73fb      	strb	r3, [r7, #15]
    break;
 8007d94:	bf00      	nop
  }
  return usb_status;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	4608      	mov	r0, r1
 8007daa:	4611      	mov	r1, r2
 8007dac:	461a      	mov	r2, r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	70fb      	strb	r3, [r7, #3]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70bb      	strb	r3, [r7, #2]
 8007db6:	4613      	mov	r3, r2
 8007db8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007dc8:	78bb      	ldrb	r3, [r7, #2]
 8007dca:	883a      	ldrh	r2, [r7, #0]
 8007dcc:	78f9      	ldrb	r1, [r7, #3]
 8007dce:	f7fa fdba 	bl	8002946 <HAL_PCD_EP_Open>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d817      	bhi.n	8007e0c <USBD_LL_OpenEP+0x6c>
 8007ddc:	a201      	add	r2, pc, #4	; (adr r2, 8007de4 <USBD_LL_OpenEP+0x44>)
 8007dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de2:	bf00      	nop
 8007de4:	08007df5 	.word	0x08007df5
 8007de8:	08007dfb 	.word	0x08007dfb
 8007dec:	08007e01 	.word	0x08007e01
 8007df0:	08007e07 	.word	0x08007e07
    case HAL_OK :
      usb_status = USBD_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
    break;
 8007df8:	e00b      	b.n	8007e12 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8007dfe:	e008      	b.n	8007e12 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e00:	2301      	movs	r3, #1
 8007e02:	73fb      	strb	r3, [r7, #15]
    break;
 8007e04:	e005      	b.n	8007e12 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e06:	2303      	movs	r3, #3
 8007e08:	73fb      	strb	r3, [r7, #15]
    break;
 8007e0a:	e002      	b.n	8007e12 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e10:	bf00      	nop
  }
  return usb_status;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e36:	78fa      	ldrb	r2, [r7, #3]
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fa fdeb 	bl	8002a16 <HAL_PCD_EP_Close>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d816      	bhi.n	8007e78 <USBD_LL_CloseEP+0x5c>
 8007e4a:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <USBD_LL_CloseEP+0x34>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007e67 	.word	0x08007e67
 8007e58:	08007e6d 	.word	0x08007e6d
 8007e5c:	08007e73 	.word	0x08007e73
    case HAL_OK :
      usb_status = USBD_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
    break;
 8007e64:	e00b      	b.n	8007e7e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e66:	2303      	movs	r3, #3
 8007e68:	73fb      	strb	r3, [r7, #15]
    break;
 8007e6a:	e008      	b.n	8007e7e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e70:	e005      	b.n	8007e7e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e72:	2303      	movs	r3, #3
 8007e74:	73fb      	strb	r3, [r7, #15]
    break;
 8007e76:	e002      	b.n	8007e7e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e7c:	bf00      	nop
  }
  return usb_status;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fa fe92 	bl	8002bd0 <HAL_PCD_EP_SetStall>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d816      	bhi.n	8007ee4 <USBD_LL_StallEP+0x5c>
 8007eb6:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <USBD_LL_StallEP+0x34>)
 8007eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebc:	08007ecd 	.word	0x08007ecd
 8007ec0:	08007ed3 	.word	0x08007ed3
 8007ec4:	08007ed9 	.word	0x08007ed9
 8007ec8:	08007edf 	.word	0x08007edf
    case HAL_OK :
      usb_status = USBD_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed0:	e00b      	b.n	8007eea <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed6:	e008      	b.n	8007eea <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	73fb      	strb	r3, [r7, #15]
    break;
 8007edc:	e005      	b.n	8007eea <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee2:	e002      	b.n	8007eea <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee8:	bf00      	nop
  }
  return usb_status;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	4611      	mov	r1, r2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fa febe 	bl	8002c94 <HAL_PCD_EP_ClrStall>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d816      	bhi.n	8007f50 <USBD_LL_ClearStallEP+0x5c>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <USBD_LL_ClearStallEP+0x34>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f3f 	.word	0x08007f3f
 8007f30:	08007f45 	.word	0x08007f45
 8007f34:	08007f4b 	.word	0x08007f4b
    case HAL_OK :
      usb_status = USBD_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f3c:	e00b      	b.n	8007f56 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	73fb      	strb	r3, [r7, #15]
    break;
 8007f42:	e008      	b.n	8007f56 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f44:	2301      	movs	r3, #1
 8007f46:	73fb      	strb	r3, [r7, #15]
    break;
 8007f48:	e005      	b.n	8007f56 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f4e:	e002      	b.n	8007f56 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007f50:	2303      	movs	r3, #3
 8007f52:	73fb      	strb	r3, [r7, #15]
    break;
 8007f54:	bf00      	nop
  }
  return usb_status;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da0b      	bge.n	8007f94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	4613      	mov	r3, r2
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	1a9b      	subs	r3, r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	333e      	adds	r3, #62	; 0x3e
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	e00b      	b.n	8007fac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f9a:	68f9      	ldr	r1, [r7, #12]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	1a9b      	subs	r3, r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007faa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fd2:	78fa      	ldrb	r2, [r7, #3]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fa fc90 	bl	80028fc <HAL_PCD_SetAddress>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d816      	bhi.n	8008014 <USBD_LL_SetUSBAddress+0x5c>
 8007fe6:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <USBD_LL_SetUSBAddress+0x34>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	08007ffd 	.word	0x08007ffd
 8007ff0:	08008003 	.word	0x08008003
 8007ff4:	08008009 	.word	0x08008009
 8007ff8:	0800800f 	.word	0x0800800f
    case HAL_OK :
      usb_status = USBD_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8008000:	e00b      	b.n	800801a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008002:	2303      	movs	r3, #3
 8008004:	73fb      	strb	r3, [r7, #15]
    break;
 8008006:	e008      	b.n	800801a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008008:	2301      	movs	r3, #1
 800800a:	73fb      	strb	r3, [r7, #15]
    break;
 800800c:	e005      	b.n	800801a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800800e:	2303      	movs	r3, #3
 8008010:	73fb      	strb	r3, [r7, #15]
    break;
 8008012:	e002      	b.n	800801a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	73fb      	strb	r3, [r7, #15]
    break;
 8008018:	bf00      	nop
  }
  return usb_status;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	603b      	str	r3, [r7, #0]
 8008030:	460b      	mov	r3, r1
 8008032:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008042:	7af9      	ldrb	r1, [r7, #11]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	f7fa fd85 	bl	8002b56 <HAL_PCD_EP_Transmit>
 800804c:	4603      	mov	r3, r0
 800804e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008050:	7dbb      	ldrb	r3, [r7, #22]
 8008052:	2b03      	cmp	r3, #3
 8008054:	d816      	bhi.n	8008084 <USBD_LL_Transmit+0x60>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <USBD_LL_Transmit+0x38>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	0800806d 	.word	0x0800806d
 8008060:	08008073 	.word	0x08008073
 8008064:	08008079 	.word	0x08008079
 8008068:	0800807f 	.word	0x0800807f
    case HAL_OK :
      usb_status = USBD_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	75fb      	strb	r3, [r7, #23]
    break;
 8008070:	e00b      	b.n	800808a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008072:	2303      	movs	r3, #3
 8008074:	75fb      	strb	r3, [r7, #23]
    break;
 8008076:	e008      	b.n	800808a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
    break;
 800807c:	e005      	b.n	800808a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800807e:	2303      	movs	r3, #3
 8008080:	75fb      	strb	r3, [r7, #23]
    break;
 8008082:	e002      	b.n	800808a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008084:	2303      	movs	r3, #3
 8008086:	75fb      	strb	r3, [r7, #23]
    break;
 8008088:	bf00      	nop
  }
  return usb_status;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	460b      	mov	r3, r1
 80080a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080b2:	7af9      	ldrb	r1, [r7, #11]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	f7fa fcf7 	bl	8002aaa <HAL_PCD_EP_Receive>
 80080bc:	4603      	mov	r3, r0
 80080be:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80080c0:	7dbb      	ldrb	r3, [r7, #22]
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d816      	bhi.n	80080f4 <USBD_LL_PrepareReceive+0x60>
 80080c6:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <USBD_LL_PrepareReceive+0x38>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	080080dd 	.word	0x080080dd
 80080d0:	080080e3 	.word	0x080080e3
 80080d4:	080080e9 	.word	0x080080e9
 80080d8:	080080ef 	.word	0x080080ef
    case HAL_OK :
      usb_status = USBD_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	75fb      	strb	r3, [r7, #23]
    break;
 80080e0:	e00b      	b.n	80080fa <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080e2:	2303      	movs	r3, #3
 80080e4:	75fb      	strb	r3, [r7, #23]
    break;
 80080e6:	e008      	b.n	80080fa <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080e8:	2301      	movs	r3, #1
 80080ea:	75fb      	strb	r3, [r7, #23]
    break;
 80080ec:	e005      	b.n	80080fa <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080ee:	2303      	movs	r3, #3
 80080f0:	75fb      	strb	r3, [r7, #23]
    break;
 80080f2:	e002      	b.n	80080fa <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80080f4:	2303      	movs	r3, #3
 80080f6:	75fb      	strb	r3, [r7, #23]
    break;
 80080f8:	bf00      	nop
  }
  return usb_status;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	4611      	mov	r1, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f7fa fd03 	bl	8002b26 <HAL_PCD_EP_GetRxCount>
 8008120:	4603      	mov	r3, r0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <HAL_PCDEx_LPM_Callback+0x18>
 800813e:	2b01      	cmp	r3, #1
 8008140:	d01f      	beq.n	8008182 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008142:	e03b      	b.n	80081bc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d007      	beq.n	800815c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800814c:	f000 f854 	bl	80081f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008150:	4b1c      	ldr	r3, [pc, #112]	; (80081c4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	4a1b      	ldr	r2, [pc, #108]	; (80081c4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008156:	f023 0306 	bic.w	r3, r3, #6
 800815a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6812      	ldr	r2, [r2, #0]
 800816a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800816e:	f023 0301 	bic.w	r3, r3, #1
 8008172:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe fb08 	bl	8006790 <USBD_LL_Resume>
    break;
 8008180:	e01c      	b.n	80081bc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6812      	ldr	r2, [r2, #0]
 8008190:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008194:	f043 0301 	orr.w	r3, r3, #1
 8008198:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe fadf 	bl	8006764 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081ae:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <HAL_PCDEx_LPM_Callback+0x98>)
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	4a04      	ldr	r2, [pc, #16]	; (80081c4 <HAL_PCDEx_LPM_Callback+0x98>)
 80081b4:	f043 0306 	orr.w	r3, r3, #6
 80081b8:	6113      	str	r3, [r2, #16]
    break;
 80081ba:	bf00      	nop
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	e000ed00 	.word	0xe000ed00

080081c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081d0:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <USBD_static_malloc+0x18>)
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	200001b0 	.word	0x200001b0

080081e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]

}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80081fc:	f7f8 f80c 	bl	8000218 <SystemClock_Config>
}
 8008200:	bf00      	nop
 8008202:	bd80      	pop	{r7, pc}

08008204 <__libc_init_array>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	4d0d      	ldr	r5, [pc, #52]	; (800823c <__libc_init_array+0x38>)
 8008208:	4c0d      	ldr	r4, [pc, #52]	; (8008240 <__libc_init_array+0x3c>)
 800820a:	1b64      	subs	r4, r4, r5
 800820c:	10a4      	asrs	r4, r4, #2
 800820e:	2600      	movs	r6, #0
 8008210:	42a6      	cmp	r6, r4
 8008212:	d109      	bne.n	8008228 <__libc_init_array+0x24>
 8008214:	4d0b      	ldr	r5, [pc, #44]	; (8008244 <__libc_init_array+0x40>)
 8008216:	4c0c      	ldr	r4, [pc, #48]	; (8008248 <__libc_init_array+0x44>)
 8008218:	f000 f820 	bl	800825c <_init>
 800821c:	1b64      	subs	r4, r4, r5
 800821e:	10a4      	asrs	r4, r4, #2
 8008220:	2600      	movs	r6, #0
 8008222:	42a6      	cmp	r6, r4
 8008224:	d105      	bne.n	8008232 <__libc_init_array+0x2e>
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	f855 3b04 	ldr.w	r3, [r5], #4
 800822c:	4798      	blx	r3
 800822e:	3601      	adds	r6, #1
 8008230:	e7ee      	b.n	8008210 <__libc_init_array+0xc>
 8008232:	f855 3b04 	ldr.w	r3, [r5], #4
 8008236:	4798      	blx	r3
 8008238:	3601      	adds	r6, #1
 800823a:	e7f2      	b.n	8008222 <__libc_init_array+0x1e>
 800823c:	080082fc 	.word	0x080082fc
 8008240:	080082fc 	.word	0x080082fc
 8008244:	080082fc 	.word	0x080082fc
 8008248:	08008300 	.word	0x08008300

0800824c <memset>:
 800824c:	4402      	add	r2, r0
 800824e:	4603      	mov	r3, r0
 8008250:	4293      	cmp	r3, r2
 8008252:	d100      	bne.n	8008256 <memset+0xa>
 8008254:	4770      	bx	lr
 8008256:	f803 1b01 	strb.w	r1, [r3], #1
 800825a:	e7f9      	b.n	8008250 <memset+0x4>

0800825c <_init>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	bf00      	nop
 8008260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008262:	bc08      	pop	{r3}
 8008264:	469e      	mov	lr, r3
 8008266:	4770      	bx	lr

08008268 <_fini>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr
